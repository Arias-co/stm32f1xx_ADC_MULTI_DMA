
stm32f1xx_ADC_MULTI_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800331c  0800331c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800331c  0800331c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800331c  0800331c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000074  0800339c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  0800339c  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e47  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002df6  00000000  00000000  00036ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f0  00000000  00000000  00039ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e8  00000000  00000000  0003a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c425  00000000  00000000  0003adb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a936  00000000  00000000  000571dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095502  00000000  00000000  00061b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7015  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c0  00000000  00000000  000f7090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080031cc 	.word	0x080031cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080031cc 	.word	0x080031cc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN5PrintC1Ev>:
using namespace std;

/**
 *  Constructor
 */
Print::Print()
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	4a04      	ldr	r2, [pc, #16]	; (8000178 <_ZN5PrintC1Ev+0x1c>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	601a      	str	r2, [r3, #0]
{

}
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4618      	mov	r0, r3
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	080032c0 	.word	0x080032c0

0800017c <_ZN5Print5printEPKcz>:
 * @param format  contiene una cadena de formato que sigue las mismas
 *        especificaciones que el formato en printf
 * @note  la funcion que utiliza para el formato es sprintf
 */
void Print::print( const char * format, ... )
{
 800017c:	b40e      	push	{r1, r2, r3}
 800017e:	b580      	push	{r7, lr}
 8000180:	b0b7      	sub	sp, #220	; 0xdc
 8000182:	af00      	add	r7, sp, #0
 8000184:	6078      	str	r0, [r7, #4]
     un n√∫mero variable de argumentos. */
    va_list argp;

    /* va_start es una macro que acepta dos argumentos, un va_list y el nombre
     de la variable que precede directamente a la elipsis ("..."). */
    va_start( argp, format );
 8000186:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800018a:	60fb      	str	r3, [r7, #12]

    if ( 0 < vsprintf( string, format, argp ) ) // build string
 800018c:	f107 0310 	add.w	r3, r7, #16
 8000190:	68fa      	ldr	r2, [r7, #12]
 8000192:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8000196:	4618      	mov	r0, r3
 8000198:	f002 fd04 	bl	8002ba4 <vsiprintf>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	bfcc      	ite	gt
 80001a2:	2301      	movgt	r3, #1
 80001a4:	2300      	movle	r3, #0
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d007      	beq.n	80001bc <_ZN5Print5printEPKcz+0x40>
    {
        write( (uint8_t*) string );  // funcion virtual
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f107 0210 	add.w	r2, r7, #16
 80001b6:	4611      	mov	r1, r2
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	4798      	blx	r3
    }

    va_end( argp );

}
 80001bc:	bf00      	nop
 80001be:	37dc      	adds	r7, #220	; 0xdc
 80001c0:	46bd      	mov	sp, r7
 80001c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001c6:	b003      	add	sp, #12
 80001c8:	4770      	bx	lr
	...

080001cc <_ZN6SerialC1EP20__UART_HandleTypeDef>:
 */

#include "Serial.h"


Serial::Serial(UART_HandleTypeDef * uartx)
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	6039      	str	r1, [r7, #0]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4618      	mov	r0, r3
 80001da:	f7ff ffbf 	bl	800015c <_ZN5PrintC1Ev>
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <_ZN6SerialC1EP20__UART_HandleTypeDef+0x28>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	601a      	str	r2, [r3, #0]
{
    // TODO Auto-generated constructor stub
    uart = uartx;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	683a      	ldr	r2, [r7, #0]
 80001e8:	605a      	str	r2, [r3, #4]
}
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4618      	mov	r0, r3
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	080032cc 	.word	0x080032cc

080001f8 <_ZN6Serial5writeEPh>:
        }
    }
}

void Serial::write( uint8_t  *text )
{
 80001f8:	b590      	push	{r4, r7, lr}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]

    HAL_UART_Transmit( uart, text,strlen((char *)text), 1000 );
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	685c      	ldr	r4, [r3, #4]
 8000206:	6838      	ldr	r0, [r7, #0]
 8000208:	f7ff ffa0 	bl	800014c <strlen>
 800020c:	4603      	mov	r3, r0
 800020e:	b29a      	uxth	r2, r3
 8000210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000214:	6839      	ldr	r1, [r7, #0]
 8000216:	4620      	mov	r0, r4
 8000218:	f002 f9c9 	bl	80025ae <HAL_UART_Transmit>
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	bd90      	pop	{r4, r7, pc}

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fbf4 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f860 	bl	80002f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f9e2 	bl	80005f8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000234:	f000 f9c2 	bl	80005bc <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000238:	f000 f8c4 	bl	80003c4 <_ZL12MX_ADC1_Initv>
  MX_USART1_UART_Init();
 800023c:	f000 f990 	bl	8000560 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)value_adc, 8);
 8000240:	2208      	movs	r2, #8
 8000242:	4920      	ldr	r1, [pc, #128]	; (80002c4 <main+0xa0>)
 8000244:	4820      	ldr	r0, [pc, #128]	; (80002c8 <main+0xa4>)
 8000246:	f000 fd41 	bl	8000ccc <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      serial.print("value chanel 0 = %d \r\n",value_adc[0]);
 800024a:	4b1e      	ldr	r3, [pc, #120]	; (80002c4 <main+0xa0>)
 800024c:	881b      	ldrh	r3, [r3, #0]
 800024e:	461a      	mov	r2, r3
 8000250:	491e      	ldr	r1, [pc, #120]	; (80002cc <main+0xa8>)
 8000252:	481f      	ldr	r0, [pc, #124]	; (80002d0 <main+0xac>)
 8000254:	f7ff ff92 	bl	800017c <_ZN5Print5printEPKcz>
      serial.print("value chanel 1 = %d \r\n",value_adc[1]);
 8000258:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <main+0xa0>)
 800025a:	885b      	ldrh	r3, [r3, #2]
 800025c:	461a      	mov	r2, r3
 800025e:	491d      	ldr	r1, [pc, #116]	; (80002d4 <main+0xb0>)
 8000260:	481b      	ldr	r0, [pc, #108]	; (80002d0 <main+0xac>)
 8000262:	f7ff ff8b 	bl	800017c <_ZN5Print5printEPKcz>
      serial.print("value chanel 2 = %d \r\n",value_adc[2]);
 8000266:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <main+0xa0>)
 8000268:	889b      	ldrh	r3, [r3, #4]
 800026a:	461a      	mov	r2, r3
 800026c:	491a      	ldr	r1, [pc, #104]	; (80002d8 <main+0xb4>)
 800026e:	4818      	ldr	r0, [pc, #96]	; (80002d0 <main+0xac>)
 8000270:	f7ff ff84 	bl	800017c <_ZN5Print5printEPKcz>
      serial.print("value chanel 3 = %d \r\n",value_adc[3]);
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <main+0xa0>)
 8000276:	88db      	ldrh	r3, [r3, #6]
 8000278:	461a      	mov	r2, r3
 800027a:	4918      	ldr	r1, [pc, #96]	; (80002dc <main+0xb8>)
 800027c:	4814      	ldr	r0, [pc, #80]	; (80002d0 <main+0xac>)
 800027e:	f7ff ff7d 	bl	800017c <_ZN5Print5printEPKcz>
      serial.print("value chanel 4 = %d \r\n",value_adc[4]);
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <main+0xa0>)
 8000284:	891b      	ldrh	r3, [r3, #8]
 8000286:	461a      	mov	r2, r3
 8000288:	4915      	ldr	r1, [pc, #84]	; (80002e0 <main+0xbc>)
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <main+0xac>)
 800028c:	f7ff ff76 	bl	800017c <_ZN5Print5printEPKcz>
      serial.print("value chanel 5 = %d \r\n",value_adc[5]);
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <main+0xa0>)
 8000292:	895b      	ldrh	r3, [r3, #10]
 8000294:	461a      	mov	r2, r3
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <main+0xc0>)
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <main+0xac>)
 800029a:	f7ff ff6f 	bl	800017c <_ZN5Print5printEPKcz>
      serial.print("value chanel 6 = %d \r\n",value_adc[6]);
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <main+0xa0>)
 80002a0:	899b      	ldrh	r3, [r3, #12]
 80002a2:	461a      	mov	r2, r3
 80002a4:	4910      	ldr	r1, [pc, #64]	; (80002e8 <main+0xc4>)
 80002a6:	480a      	ldr	r0, [pc, #40]	; (80002d0 <main+0xac>)
 80002a8:	f7ff ff68 	bl	800017c <_ZN5Print5printEPKcz>
      serial.print("value chanel 7 = %d \r\n",value_adc[7]);
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <main+0xa0>)
 80002ae:	89db      	ldrh	r3, [r3, #14]
 80002b0:	461a      	mov	r2, r3
 80002b2:	490e      	ldr	r1, [pc, #56]	; (80002ec <main+0xc8>)
 80002b4:	4806      	ldr	r0, [pc, #24]	; (80002d0 <main+0xac>)
 80002b6:	f7ff ff61 	bl	800017c <_ZN5Print5printEPKcz>
      HAL_Delay(300);
 80002ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002be:	f000 fc0b 	bl	8000ad8 <HAL_Delay>
      serial.print("value chanel 0 = %d \r\n",value_adc[0]);
 80002c2:	e7c2      	b.n	800024a <main+0x26>
 80002c4:	2000014c 	.word	0x2000014c
 80002c8:	20000090 	.word	0x20000090
 80002cc:	080031e4 	.word	0x080031e4
 80002d0:	20000144 	.word	0x20000144
 80002d4:	080031fc 	.word	0x080031fc
 80002d8:	08003214 	.word	0x08003214
 80002dc:	0800322c 	.word	0x0800322c
 80002e0:	08003244 	.word	0x08003244
 80002e4:	0800325c 	.word	0x0800325c
 80002e8:	08003274 	.word	0x08003274
 80002ec:	0800328c 	.word	0x0800328c

080002f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b094      	sub	sp, #80	; 0x50
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002fa:	2228      	movs	r2, #40	; 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fb38 	bl	8002974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	f107 0314 	add.w	r3, r7, #20
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000320:	2301      	movs	r3, #1
 8000322:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000328:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	2302      	movs	r3, #2
 8000334:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800033c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000340:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fc12 	bl	8001b70 <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	bf14      	ite	ne
 8000352:	2301      	movne	r3, #1
 8000354:	2300      	moveq	r3, #0
 8000356:	b2db      	uxtb	r3, r3
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800035c:	f000 f998 	bl	8000690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000360:	230f      	movs	r3, #15
 8000362:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000364:	2302      	movs	r3, #2
 8000366:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800036c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000370:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000376:	f107 0314 	add.w	r3, r7, #20
 800037a:	2102      	movs	r1, #2
 800037c:	4618      	mov	r0, r3
 800037e:	f001 fe77 	bl	8002070 <HAL_RCC_ClockConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	bf14      	ite	ne
 8000388:	2301      	movne	r3, #1
 800038a:	2300      	moveq	r3, #0
 800038c:	b2db      	uxtb	r3, r3
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000392:	f000 f97d 	bl	8000690 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000396:	2302      	movs	r3, #2
 8000398:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800039a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800039e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 f800 	bl	80023a8 <HAL_RCCEx_PeriphCLKConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	bf14      	ite	ne
 80003ae:	2301      	movne	r3, #1
 80003b0:	2300      	moveq	r3, #0
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 80003b8:	f000 f96a 	bl	8000690 <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3750      	adds	r7, #80	; 0x50
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003d4:	4b60      	ldr	r3, [pc, #384]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 80003d6:	4a61      	ldr	r2, [pc, #388]	; (800055c <_ZL12MX_ADC1_Initv+0x198>)
 80003d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003da:	4b5f      	ldr	r3, [pc, #380]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 80003dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003e2:	4b5d      	ldr	r3, [pc, #372]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e8:	4b5b      	ldr	r3, [pc, #364]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ee:	4b5a      	ldr	r3, [pc, #360]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 80003f0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003f6:	4b58      	ldr	r3, [pc, #352]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80003fc:	4b56      	ldr	r3, [pc, #344]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 80003fe:	2208      	movs	r2, #8
 8000400:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000402:	4855      	ldr	r0, [pc, #340]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 8000404:	f000 fb8a 	bl	8000b1c <HAL_ADC_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	bf14      	ite	ne
 800040e:	2301      	movne	r3, #1
 8000410:	2300      	moveq	r3, #0
 8000412:	b2db      	uxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8000418:	f000 f93a 	bl	8000690 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000420:	2301      	movs	r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000424:	2302      	movs	r3, #2
 8000426:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	4619      	mov	r1, r3
 800042c:	484a      	ldr	r0, [pc, #296]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 800042e:	f000 fd47 	bl	8000ec0 <HAL_ADC_ConfigChannel>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	bf14      	ite	ne
 8000438:	2301      	movne	r3, #1
 800043a:	2300      	moveq	r3, #0
 800043c:	b2db      	uxtb	r3, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8000442:	f000 f925 	bl	8000690 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000446:	2301      	movs	r3, #1
 8000448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800044a:	2302      	movs	r3, #2
 800044c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4619      	mov	r1, r3
 8000452:	4841      	ldr	r0, [pc, #260]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 8000454:	f000 fd34 	bl	8000ec0 <HAL_ADC_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf14      	ite	ne
 800045e:	2301      	movne	r3, #1
 8000460:	2300      	moveq	r3, #0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8000468:	f000 f912 	bl	8000690 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800046c:	2302      	movs	r3, #2
 800046e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000470:	2303      	movs	r3, #3
 8000472:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	4619      	mov	r1, r3
 8000478:	4837      	ldr	r0, [pc, #220]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 800047a:	f000 fd21 	bl	8000ec0 <HAL_ADC_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	bf14      	ite	ne
 8000484:	2301      	movne	r3, #1
 8000486:	2300      	moveq	r3, #0
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 800048e:	f000 f8ff 	bl	8000690 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000492:	2303      	movs	r3, #3
 8000494:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000496:	2304      	movs	r3, #4
 8000498:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4619      	mov	r1, r3
 800049e:	482e      	ldr	r0, [pc, #184]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 80004a0:	f000 fd0e 	bl	8000ec0 <HAL_ADC_ConfigChannel>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	bf14      	ite	ne
 80004aa:	2301      	movne	r3, #1
 80004ac:	2300      	moveq	r3, #0
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <_ZL12MX_ADC1_Initv+0xf4>
  {
    Error_Handler();
 80004b4:	f000 f8ec 	bl	8000690 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80004b8:	2304      	movs	r3, #4
 80004ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80004bc:	2305      	movs	r3, #5
 80004be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	4824      	ldr	r0, [pc, #144]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 80004c6:	f000 fcfb 	bl	8000ec0 <HAL_ADC_ConfigChannel>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	bf14      	ite	ne
 80004d0:	2301      	movne	r3, #1
 80004d2:	2300      	moveq	r3, #0
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <_ZL12MX_ADC1_Initv+0x11a>
  {
    Error_Handler();
 80004da:	f000 f8d9 	bl	8000690 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004de:	2305      	movs	r3, #5
 80004e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80004e2:	2306      	movs	r3, #6
 80004e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	4619      	mov	r1, r3
 80004ea:	481b      	ldr	r0, [pc, #108]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 80004ec:	f000 fce8 	bl	8000ec0 <HAL_ADC_ConfigChannel>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	bf14      	ite	ne
 80004f6:	2301      	movne	r3, #1
 80004f8:	2300      	moveq	r3, #0
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <_ZL12MX_ADC1_Initv+0x140>
  {
    Error_Handler();
 8000500:	f000 f8c6 	bl	8000690 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000504:	2306      	movs	r3, #6
 8000506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000508:	2307      	movs	r3, #7
 800050a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	4619      	mov	r1, r3
 8000510:	4811      	ldr	r0, [pc, #68]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 8000512:	f000 fcd5 	bl	8000ec0 <HAL_ADC_ConfigChannel>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	bf14      	ite	ne
 800051c:	2301      	movne	r3, #1
 800051e:	2300      	moveq	r3, #0
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <_ZL12MX_ADC1_Initv+0x166>
  {
    Error_Handler();
 8000526:	f000 f8b3 	bl	8000690 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800052a:	2307      	movs	r3, #7
 800052c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800052e:	2308      	movs	r3, #8
 8000530:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	4619      	mov	r1, r3
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <_ZL12MX_ADC1_Initv+0x194>)
 8000538:	f000 fcc2 	bl	8000ec0 <HAL_ADC_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	bf14      	ite	ne
 8000542:	2301      	movne	r3, #1
 8000544:	2300      	moveq	r3, #0
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <_ZL12MX_ADC1_Initv+0x18c>
  {
    Error_Handler();
 800054c:	f000 f8a0 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000090 	.word	0x20000090
 800055c:	40012400 	.word	0x40012400

08000560 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000568:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800056c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000570:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000586:	220c      	movs	r2, #12
 8000588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000596:	4807      	ldr	r0, [pc, #28]	; (80005b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000598:	f001 ffbc 	bl	8002514 <HAL_UART_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf14      	ite	ne
 80005a2:	2301      	movne	r3, #1
 80005a4:	2300      	moveq	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80005ac:	f000 f870 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000104 	.word	0x20000104
 80005b8:	40013800 	.word	0x40013800

080005bc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <_ZL11MX_DMA_Initv+0x38>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <_ZL11MX_DMA_Initv+0x38>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <_ZL11MX_DMA_Initv+0x38>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	200b      	movs	r0, #11
 80005e0:	f000 ff2f 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005e4:	200b      	movs	r0, #11
 80005e6:	f000 ff48 	bl	800147a <HAL_NVIC_EnableIRQ>

}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <_ZL12MX_GPIO_Initv+0x90>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <_ZL12MX_GPIO_Initv+0x90>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <_ZL12MX_GPIO_Initv+0x90>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0310 	and.w	r3, r3, #16
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <_ZL12MX_GPIO_Initv+0x90>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <_ZL12MX_GPIO_Initv+0x90>)
 800062a:	f043 0320 	orr.w	r3, r3, #32
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <_ZL12MX_GPIO_Initv+0x90>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0320 	and.w	r3, r3, #32
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <_ZL12MX_GPIO_Initv+0x90>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a11      	ldr	r2, [pc, #68]	; (8000688 <_ZL12MX_GPIO_Initv+0x90>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <_ZL12MX_GPIO_Initv+0x90>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <_ZL12MX_GPIO_Initv+0x94>)
 800065c:	f001 fa70 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <_ZL12MX_GPIO_Initv+0x94>)
 800067a:	f001 f907 	bl	800188c <HAL_GPIO_Init>

}
 800067e:	bf00      	nop
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	40011000 	.word	0x40011000

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000696:	e7fe      	b.n	8000696 <Error_Handler+0x6>

08000698 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d108      	bne.n	80006ba <_Z41__static_initialization_and_destruction_0ii+0x22>
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d103      	bne.n	80006ba <_Z41__static_initialization_and_destruction_0ii+0x22>
Serial serial(&huart1);
 80006b2:	4904      	ldr	r1, [pc, #16]	; (80006c4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80006b6:	f7ff fd89 	bl	80001cc <_ZN6SerialC1EP20__UART_HandleTypeDef>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000104 	.word	0x20000104
 80006c8:	20000144 	.word	0x20000144

080006cc <_GLOBAL__sub_I_hadc1>:
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006d4:	2001      	movs	r0, #1
 80006d6:	f7ff ffdf 	bl	8000698 <_Z41__static_initialization_and_destruction_0ii>
 80006da:	bd80      	pop	{r7, pc}

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <HAL_MspInit+0x5c>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	4a14      	ldr	r2, [pc, #80]	; (8000738 <HAL_MspInit+0x5c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6193      	str	r3, [r2, #24]
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_MspInit+0x5c>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_MspInit+0x5c>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <HAL_MspInit+0x5c>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_MspInit+0x5c>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_MspInit+0x60>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_MspInit+0x60>)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000
 800073c:	40010000 	.word	0x40010000

08000740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a28      	ldr	r2, [pc, #160]	; (80007fc <HAL_ADC_MspInit+0xbc>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d149      	bne.n	80007f4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a26      	ldr	r2, [pc, #152]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 8000766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a20      	ldr	r2, [pc, #128]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <HAL_ADC_MspInit+0xc0>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000790:	23ff      	movs	r3, #255	; 0xff
 8000792:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4619      	mov	r1, r3
 800079e:	4819      	ldr	r0, [pc, #100]	; (8000804 <HAL_ADC_MspInit+0xc4>)
 80007a0:	f001 f874 	bl	800188c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007a6:	4a19      	ldr	r2, [pc, #100]	; (800080c <HAL_ADC_MspInit+0xcc>)
 80007a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007ce:	2220      	movs	r2, #32
 80007d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007da:	f000 fe69 	bl	80014b0 <HAL_DMA_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80007e4:	f7ff ff54 	bl	8000690 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007ec:	621a      	str	r2, [r3, #32]
 80007ee:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_ADC_MspInit+0xc8>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40012400 	.word	0x40012400
 8000800:	40021000 	.word	0x40021000
 8000804:	40010800 	.word	0x40010800
 8000808:	200000c0 	.word	0x200000c0
 800080c:	40020008 	.word	0x40020008

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <HAL_UART_MspInit+0x8c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d131      	bne.n	8000894 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <HAL_UART_MspInit+0x90>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a1a      	ldr	r2, [pc, #104]	; (80008a0 <HAL_UART_MspInit+0x90>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_UART_MspInit+0x90>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_UART_MspInit+0x90>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <HAL_UART_MspInit+0x90>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_UART_MspInit+0x90>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000864:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <HAL_UART_MspInit+0x94>)
 8000876:	f001 f809 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <HAL_UART_MspInit+0x94>)
 8000890:	f000 fffc 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40013800 	.word	0x40013800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010800 	.word	0x40010800

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ee:	f000 f8d7 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <DMA1_Channel1_IRQHandler+0x10>)
 80008fe:	f000 fe91 	bl	8001624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000c0 	.word	0x200000c0

0800090c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
	return 1;
 8000910:	2301      	movs	r3, #1
}
 8000912:	4618      	mov	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <_kill>:

int _kill(int pid, int sig)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000924:	f001 ffca 	bl	80028bc <__errno>
 8000928:	4602      	mov	r2, r0
 800092a:	2316      	movs	r3, #22
 800092c:	6013      	str	r3, [r2, #0]
	return -1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_exit>:

void _exit (int status)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000942:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffe7 	bl	800091a <_kill>
	while (1) {}		/* Make sure we hang here */
 800094c:	e7fe      	b.n	800094c <_exit+0x12>
	...

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f001 ff9c 	bl	80028bc <__errno>
 8000984:	4602      	mov	r2, r0
 8000986:	230c      	movs	r3, #12
 8000988:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20005000 	.word	0x20005000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	2000015c 	.word	0x2000015c
 80009b8:	20000170 	.word	0x20000170

080009bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009ca:	e003      	b.n	80009d4 <LoopCopyDataInit>

080009cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009d2:	3104      	adds	r1, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009dc:	d3f6      	bcc.n	80009cc <CopyDataInit>
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009e0:	e002      	b.n	80009e8 <LoopFillZerobss>

080009e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009e4:	f842 3b04 	str.w	r3, [r2], #4

080009e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009ec:	d3f9      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ee:	f7ff ffe5 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f001 ff69 	bl	80028c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f6:	f7ff fc15 	bl	8000224 <main>
  bx lr
 80009fa:	4770      	bx	lr
  ldr r3, =_sidata
 80009fc:	08003328 	.word	0x08003328
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a04:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000a08:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000a0c:	20000170 	.word	0x20000170

08000a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_2_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x28>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 fd01 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 f808 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff fe54 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x54>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x58>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fd19 	bl	8001496 <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00e      	b.n	8000a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d80a      	bhi.n	8000a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a7c:	f000 fce1 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <HAL_IncTick+0x20>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000168 	.word	0x20000168

08000ac4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000168 	.word	0x20000168

08000ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff fff0 	bl	8000ac4 <HAL_GetTick>
 8000ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000af0:	d005      	beq.n	8000afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_Delay+0x40>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afe:	bf00      	nop
 8000b00:	f7ff ffe0 	bl	8000ac4 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d8f7      	bhi.n	8000b00 <HAL_Delay+0x28>
  {
  }
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000008 	.word	0x20000008

08000b1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e0be      	b.n	8000cbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d109      	bne.n	8000b60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fdf0 	bl	8000740 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 faf7 	bl	8001154 <ADC_ConversionStop_Disable>
 8000b66:	4603      	mov	r3, r0
 8000b68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 8099 	bne.w	8000caa <HAL_ADC_Init+0x18e>
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8095 	bne.w	8000caa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b88:	f023 0302 	bic.w	r3, r3, #2
 8000b8c:	f043 0202 	orr.w	r2, r3, #2
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7b1b      	ldrb	r3, [r3, #12]
 8000ba2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ba4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb4:	d003      	beq.n	8000bbe <HAL_ADC_Init+0xa2>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d102      	bne.n	8000bc4 <HAL_ADC_Init+0xa8>
 8000bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc2:	e000      	b.n	8000bc6 <HAL_ADC_Init+0xaa>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	7d1b      	ldrb	r3, [r3, #20]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d119      	bne.n	8000c08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7b1b      	ldrb	r3, [r3, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d109      	bne.n	8000bf0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	035a      	lsls	r2, r3, #13
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	e00b      	b.n	8000c08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf4:	f043 0220 	orr.w	r2, r3, #32
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c00:	f043 0201 	orr.w	r2, r3, #1
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <HAL_ADC_Init+0x1a8>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c38:	d003      	beq.n	8000c42 <HAL_ADC_Init+0x126>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d104      	bne.n	8000c4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	051b      	lsls	r3, r3, #20
 8000c4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_ADC_Init+0x1ac>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d10b      	bne.n	8000c88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7a:	f023 0303 	bic.w	r3, r3, #3
 8000c7e:	f043 0201 	orr.w	r2, r3, #1
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c86:	e018      	b.n	8000cba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	f023 0312 	bic.w	r3, r3, #18
 8000c90:	f043 0210 	orr.w	r2, r3, #16
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9c:	f043 0201 	orr.w	r2, r3, #1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ca8:	e007      	b.n	8000cba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cae:	f043 0210 	orr.w	r2, r3, #16
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	ffe1f7fd 	.word	0xffe1f7fd
 8000cc8:	ff1f0efe 	.word	0xff1f0efe

08000ccc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a64      	ldr	r2, [pc, #400]	; (8000e74 <HAL_ADC_Start_DMA+0x1a8>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d004      	beq.n	8000cf0 <HAL_ADC_Start_DMA+0x24>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a63      	ldr	r2, [pc, #396]	; (8000e78 <HAL_ADC_Start_DMA+0x1ac>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d106      	bne.n	8000cfe <HAL_ADC_Start_DMA+0x32>
 8000cf0:	4b60      	ldr	r3, [pc, #384]	; (8000e74 <HAL_ADC_Start_DMA+0x1a8>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f040 80b3 	bne.w	8000e64 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <HAL_ADC_Start_DMA+0x40>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e0ae      	b.n	8000e6a <HAL_ADC_Start_DMA+0x19e>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f000 f9cb 	bl	80010b0 <ADC_Enable>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f040 809a 	bne.w	8000e5a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d2e:	f023 0301 	bic.w	r3, r3, #1
 8000d32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <HAL_ADC_Start_DMA+0x1ac>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d105      	bne.n	8000d50 <HAL_ADC_Start_DMA+0x84>
 8000d44:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <HAL_ADC_Start_DMA+0x1a8>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d115      	bne.n	8000d7c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d026      	beq.n	8000db8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d7a:	e01d      	b.n	8000db8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a39      	ldr	r2, [pc, #228]	; (8000e74 <HAL_ADC_Start_DMA+0x1a8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d004      	beq.n	8000d9c <HAL_ADC_Start_DMA+0xd0>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a38      	ldr	r2, [pc, #224]	; (8000e78 <HAL_ADC_Start_DMA+0x1ac>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d10d      	bne.n	8000db8 <HAL_ADC_Start_DMA+0xec>
 8000d9c:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <HAL_ADC_Start_DMA+0x1a8>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d007      	beq.n	8000db8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	f023 0206 	bic.w	r2, r3, #6
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd0:	e002      	b.n	8000dd8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	4a25      	ldr	r2, [pc, #148]	; (8000e7c <HAL_ADC_Start_DMA+0x1b0>)
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a24      	ldr	r2, [pc, #144]	; (8000e80 <HAL_ADC_Start_DMA+0x1b4>)
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <HAL_ADC_Start_DMA+0x1b8>)
 8000df6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f06f 0202 	mvn.w	r2, #2
 8000e00:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e10:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6a18      	ldr	r0, [r3, #32]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	334c      	adds	r3, #76	; 0x4c
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f000 fb9f 	bl	8001564 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e30:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e34:	d108      	bne.n	8000e48 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e44:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e46:	e00f      	b.n	8000e68 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e56:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e58:	e006      	b.n	8000e68 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000e62:	e001      	b.n	8000e68 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012400 	.word	0x40012400
 8000e78:	40012800 	.word	0x40012800
 8000e7c:	080011c9 	.word	0x080011c9
 8000e80:	08001245 	.word	0x08001245
 8000e84:	08001261 	.word	0x08001261

08000e88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
	...

08000ec0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x20>
 8000edc:	2302      	movs	r3, #2
 8000ede:	e0dc      	b.n	800109a <HAL_ADC_ConfigChannel+0x1da>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b06      	cmp	r3, #6
 8000eee:	d81c      	bhi.n	8000f2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	3b05      	subs	r3, #5
 8000f02:	221f      	movs	r2, #31
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4019      	ands	r1, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	3b05      	subs	r3, #5
 8000f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34
 8000f28:	e03c      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b0c      	cmp	r3, #12
 8000f30:	d81c      	bhi.n	8000f6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	3b23      	subs	r3, #35	; 0x23
 8000f44:	221f      	movs	r2, #31
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4019      	ands	r1, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3b23      	subs	r3, #35	; 0x23
 8000f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	631a      	str	r2, [r3, #48]	; 0x30
 8000f6a:	e01b      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3b41      	subs	r3, #65	; 0x41
 8000f7e:	221f      	movs	r2, #31
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4019      	ands	r1, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	3b41      	subs	r3, #65	; 0x41
 8000f98:	fa00 f203 	lsl.w	r2, r0, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b09      	cmp	r3, #9
 8000faa:	d91c      	bls.n	8000fe6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68d9      	ldr	r1, [r3, #12]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	3b1e      	subs	r3, #30
 8000fbe:	2207      	movs	r2, #7
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	4019      	ands	r1, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6898      	ldr	r0, [r3, #8]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3b1e      	subs	r3, #30
 8000fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	e019      	b.n	800101a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6919      	ldr	r1, [r3, #16]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	4019      	ands	r1, r3
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	6898      	ldr	r0, [r3, #8]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	fa00 f203 	lsl.w	r2, r0, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b10      	cmp	r3, #16
 8001020:	d003      	beq.n	800102a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001026:	2b11      	cmp	r3, #17
 8001028:	d132      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d125      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d126      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001050:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b10      	cmp	r3, #16
 8001058:	d11a      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <HAL_ADC_ConfigChannel+0x1ec>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	0c9a      	lsrs	r2, r3, #18
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001070:	e002      	b.n	8001078 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	3b01      	subs	r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f9      	bne.n	8001072 <HAL_ADC_ConfigChannel+0x1b2>
 800107e:	e007      	b.n	8001090 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	f043 0220 	orr.w	r2, r3, #32
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	40012400 	.word	0x40012400
 80010a8:	20000000 	.word	0x20000000
 80010ac:	431bde83 	.word	0x431bde83

080010b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d039      	beq.n	8001142 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <ADC_Enable+0x9c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <ADC_Enable+0xa0>)
 80010e4:	fba2 2303 	umull	r2, r3, r2, r3
 80010e8:	0c9b      	lsrs	r3, r3, #18
 80010ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010ec:	e002      	b.n	80010f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f9      	bne.n	80010ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010fa:	f7ff fce3 	bl	8000ac4 <HAL_GetTick>
 80010fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001100:	e018      	b.n	8001134 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001102:	f7ff fcdf 	bl	8000ac4 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d911      	bls.n	8001134 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	f043 0210 	orr.w	r2, r3, #16
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e007      	b.n	8001144 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b01      	cmp	r3, #1
 8001140:	d1df      	bne.n	8001102 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000000 	.word	0x20000000
 8001150:	431bde83 	.word	0x431bde83

08001154 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b01      	cmp	r3, #1
 800116c:	d127      	bne.n	80011be <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0201 	bic.w	r2, r2, #1
 800117c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800117e:	f7ff fca1 	bl	8000ac4 <HAL_GetTick>
 8001182:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001184:	e014      	b.n	80011b0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001186:	f7ff fc9d 	bl	8000ac4 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d90d      	bls.n	80011b0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	f043 0210 	orr.w	r2, r3, #16
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e007      	b.n	80011c0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d0e3      	beq.n	8001186 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d127      	bne.n	8001232 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011f8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011fc:	d115      	bne.n	800122a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001202:	2b00      	cmp	r3, #0
 8001204:	d111      	bne.n	800122a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d105      	bne.n	800122a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f7ff fe2c 	bl	8000e88 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001230:	e004      	b.n	800123c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	4798      	blx	r3
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff fe21 	bl	8000e9a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	f043 0204 	orr.w	r2, r3, #4
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff fe10 	bl	8000eac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4906      	ldr	r1, [pc, #24]	; (800132c <__NVIC_EnableIRQ+0x34>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800140c:	f7ff ff90 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff2d 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff42 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff90 	bl	8001384 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5f 	bl	8001330 <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff35 	bl	80012f8 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffa2 	bl	80013e8 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e043      	b.n	800154e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_DMA_Init+0xa8>)
 80014ce:	4413      	add	r3, r2
 80014d0:	4a22      	ldr	r2, [pc, #136]	; (800155c <HAL_DMA_Init+0xac>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	009a      	lsls	r2, r3, #2
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a1f      	ldr	r2, [pc, #124]	; (8001560 <HAL_DMA_Init+0xb0>)
 80014e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2202      	movs	r2, #2
 80014e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	bffdfff8 	.word	0xbffdfff8
 800155c:	cccccccd 	.word	0xcccccccd
 8001560:	40020000 	.word	0x40020000

08001564 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_DMA_Start_IT+0x20>
 8001580:	2302      	movs	r3, #2
 8001582:	e04a      	b.n	800161a <HAL_DMA_Start_IT+0xb6>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001592:	2b01      	cmp	r3, #1
 8001594:	d13a      	bne.n	800160c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2202      	movs	r2, #2
 800159a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 f938 	bl	8001830 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 020e 	orr.w	r2, r2, #14
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e00f      	b.n	80015fa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0204 	bic.w	r2, r2, #4
 80015e8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 020a 	orr.w	r2, r2, #10
 80015f8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0201 	orr.w	r2, r2, #1
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e005      	b.n	8001618 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001614:	2302      	movs	r3, #2
 8001616:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001618:	7dfb      	ldrb	r3, [r7, #23]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	2204      	movs	r2, #4
 8001642:	409a      	lsls	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d04f      	beq.n	80016ec <HAL_DMA_IRQHandler+0xc8>
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b00      	cmp	r3, #0
 8001654:	d04a      	beq.n	80016ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0204 	bic.w	r2, r2, #4
 8001672:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a66      	ldr	r2, [pc, #408]	; (8001814 <HAL_DMA_IRQHandler+0x1f0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d029      	beq.n	80016d2 <HAL_DMA_IRQHandler+0xae>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a65      	ldr	r2, [pc, #404]	; (8001818 <HAL_DMA_IRQHandler+0x1f4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d022      	beq.n	80016ce <HAL_DMA_IRQHandler+0xaa>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a63      	ldr	r2, [pc, #396]	; (800181c <HAL_DMA_IRQHandler+0x1f8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d01a      	beq.n	80016c8 <HAL_DMA_IRQHandler+0xa4>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a62      	ldr	r2, [pc, #392]	; (8001820 <HAL_DMA_IRQHandler+0x1fc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d012      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x9e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a60      	ldr	r2, [pc, #384]	; (8001824 <HAL_DMA_IRQHandler+0x200>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00a      	beq.n	80016bc <HAL_DMA_IRQHandler+0x98>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a5f      	ldr	r2, [pc, #380]	; (8001828 <HAL_DMA_IRQHandler+0x204>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d102      	bne.n	80016b6 <HAL_DMA_IRQHandler+0x92>
 80016b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b4:	e00e      	b.n	80016d4 <HAL_DMA_IRQHandler+0xb0>
 80016b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016ba:	e00b      	b.n	80016d4 <HAL_DMA_IRQHandler+0xb0>
 80016bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016c0:	e008      	b.n	80016d4 <HAL_DMA_IRQHandler+0xb0>
 80016c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016c6:	e005      	b.n	80016d4 <HAL_DMA_IRQHandler+0xb0>
 80016c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016cc:	e002      	b.n	80016d4 <HAL_DMA_IRQHandler+0xb0>
 80016ce:	2340      	movs	r3, #64	; 0x40
 80016d0:	e000      	b.n	80016d4 <HAL_DMA_IRQHandler+0xb0>
 80016d2:	2304      	movs	r3, #4
 80016d4:	4a55      	ldr	r2, [pc, #340]	; (800182c <HAL_DMA_IRQHandler+0x208>)
 80016d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 8094 	beq.w	800180a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016ea:	e08e      	b.n	800180a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2202      	movs	r2, #2
 80016f2:	409a      	lsls	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d056      	beq.n	80017aa <HAL_DMA_IRQHandler+0x186>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d051      	beq.n	80017aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10b      	bne.n	800172c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 020a 	bic.w	r2, r2, #10
 8001722:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a38      	ldr	r2, [pc, #224]	; (8001814 <HAL_DMA_IRQHandler+0x1f0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d029      	beq.n	800178a <HAL_DMA_IRQHandler+0x166>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a37      	ldr	r2, [pc, #220]	; (8001818 <HAL_DMA_IRQHandler+0x1f4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d022      	beq.n	8001786 <HAL_DMA_IRQHandler+0x162>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a35      	ldr	r2, [pc, #212]	; (800181c <HAL_DMA_IRQHandler+0x1f8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01a      	beq.n	8001780 <HAL_DMA_IRQHandler+0x15c>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a34      	ldr	r2, [pc, #208]	; (8001820 <HAL_DMA_IRQHandler+0x1fc>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d012      	beq.n	800177a <HAL_DMA_IRQHandler+0x156>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a32      	ldr	r2, [pc, #200]	; (8001824 <HAL_DMA_IRQHandler+0x200>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00a      	beq.n	8001774 <HAL_DMA_IRQHandler+0x150>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a31      	ldr	r2, [pc, #196]	; (8001828 <HAL_DMA_IRQHandler+0x204>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d102      	bne.n	800176e <HAL_DMA_IRQHandler+0x14a>
 8001768:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800176c:	e00e      	b.n	800178c <HAL_DMA_IRQHandler+0x168>
 800176e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001772:	e00b      	b.n	800178c <HAL_DMA_IRQHandler+0x168>
 8001774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001778:	e008      	b.n	800178c <HAL_DMA_IRQHandler+0x168>
 800177a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177e:	e005      	b.n	800178c <HAL_DMA_IRQHandler+0x168>
 8001780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001784:	e002      	b.n	800178c <HAL_DMA_IRQHandler+0x168>
 8001786:	2320      	movs	r3, #32
 8001788:	e000      	b.n	800178c <HAL_DMA_IRQHandler+0x168>
 800178a:	2302      	movs	r3, #2
 800178c:	4a27      	ldr	r2, [pc, #156]	; (800182c <HAL_DMA_IRQHandler+0x208>)
 800178e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	2b00      	cmp	r3, #0
 800179e:	d034      	beq.n	800180a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017a8:	e02f      	b.n	800180a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	2208      	movs	r2, #8
 80017b0:	409a      	lsls	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d028      	beq.n	800180c <HAL_DMA_IRQHandler+0x1e8>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d023      	beq.n	800180c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 020e 	bic.w	r2, r2, #14
 80017d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017dc:	2101      	movs	r1, #1
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d004      	beq.n	800180c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4798      	blx	r3
    }
  }
  return;
 800180a:	bf00      	nop
 800180c:	bf00      	nop
}
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40020008 	.word	0x40020008
 8001818:	4002001c 	.word	0x4002001c
 800181c:	40020030 	.word	0x40020030
 8001820:	40020044 	.word	0x40020044
 8001824:	40020058 	.word	0x40020058
 8001828:	4002006c 	.word	0x4002006c
 800182c:	40020000 	.word	0x40020000

08001830 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b10      	cmp	r3, #16
 800185c:	d108      	bne.n	8001870 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800186e:	e007      	b.n	8001880 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	60da      	str	r2, [r3, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b08b      	sub	sp, #44	; 0x2c
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e127      	b.n	8001af0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a0:	2201      	movs	r2, #1
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8116 	bne.w	8001aea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b12      	cmp	r3, #18
 80018c4:	d034      	beq.n	8001930 <HAL_GPIO_Init+0xa4>
 80018c6:	2b12      	cmp	r3, #18
 80018c8:	d80d      	bhi.n	80018e6 <HAL_GPIO_Init+0x5a>
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d02b      	beq.n	8001926 <HAL_GPIO_Init+0x9a>
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d804      	bhi.n	80018dc <HAL_GPIO_Init+0x50>
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d031      	beq.n	800193a <HAL_GPIO_Init+0xae>
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d01c      	beq.n	8001914 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018da:	e048      	b.n	800196e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d043      	beq.n	8001968 <HAL_GPIO_Init+0xdc>
 80018e0:	2b11      	cmp	r3, #17
 80018e2:	d01b      	beq.n	800191c <HAL_GPIO_Init+0x90>
          break;
 80018e4:	e043      	b.n	800196e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018e6:	4a89      	ldr	r2, [pc, #548]	; (8001b0c <HAL_GPIO_Init+0x280>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d026      	beq.n	800193a <HAL_GPIO_Init+0xae>
 80018ec:	4a87      	ldr	r2, [pc, #540]	; (8001b0c <HAL_GPIO_Init+0x280>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d806      	bhi.n	8001900 <HAL_GPIO_Init+0x74>
 80018f2:	4a87      	ldr	r2, [pc, #540]	; (8001b10 <HAL_GPIO_Init+0x284>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d020      	beq.n	800193a <HAL_GPIO_Init+0xae>
 80018f8:	4a86      	ldr	r2, [pc, #536]	; (8001b14 <HAL_GPIO_Init+0x288>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01d      	beq.n	800193a <HAL_GPIO_Init+0xae>
          break;
 80018fe:	e036      	b.n	800196e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001900:	4a85      	ldr	r2, [pc, #532]	; (8001b18 <HAL_GPIO_Init+0x28c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0xae>
 8001906:	4a85      	ldr	r2, [pc, #532]	; (8001b1c <HAL_GPIO_Init+0x290>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d016      	beq.n	800193a <HAL_GPIO_Init+0xae>
 800190c:	4a84      	ldr	r2, [pc, #528]	; (8001b20 <HAL_GPIO_Init+0x294>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0xae>
          break;
 8001912:	e02c      	b.n	800196e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e028      	b.n	800196e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	3304      	adds	r3, #4
 8001922:	623b      	str	r3, [r7, #32]
          break;
 8001924:	e023      	b.n	800196e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	3308      	adds	r3, #8
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e01e      	b.n	800196e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	330c      	adds	r3, #12
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e019      	b.n	800196e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001942:	2304      	movs	r3, #4
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e012      	b.n	800196e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d105      	bne.n	800195c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	611a      	str	r2, [r3, #16]
          break;
 800195a:	e008      	b.n	800196e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	615a      	str	r2, [r3, #20]
          break;
 8001966:	e002      	b.n	800196e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2bff      	cmp	r3, #255	; 0xff
 8001972:	d801      	bhi.n	8001978 <HAL_GPIO_Init+0xec>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	e001      	b.n	800197c <HAL_GPIO_Init+0xf0>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3304      	adds	r3, #4
 800197c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2bff      	cmp	r3, #255	; 0xff
 8001982:	d802      	bhi.n	800198a <HAL_GPIO_Init+0xfe>
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	e002      	b.n	8001990 <HAL_GPIO_Init+0x104>
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	3b08      	subs	r3, #8
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	210f      	movs	r1, #15
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	401a      	ands	r2, r3
 80019a2:	6a39      	ldr	r1, [r7, #32]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	431a      	orrs	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8096 	beq.w	8001aea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019be:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_GPIO_Init+0x298>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <HAL_GPIO_Init+0x298>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6193      	str	r3, [r2, #24]
 80019ca:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_GPIO_Init+0x298>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d6:	4a54      	ldr	r2, [pc, #336]	; (8001b28 <HAL_GPIO_Init+0x29c>)
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	220f      	movs	r2, #15
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4b      	ldr	r2, [pc, #300]	; (8001b2c <HAL_GPIO_Init+0x2a0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0x19e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4a      	ldr	r2, [pc, #296]	; (8001b30 <HAL_GPIO_Init+0x2a4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00d      	beq.n	8001a26 <HAL_GPIO_Init+0x19a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a49      	ldr	r2, [pc, #292]	; (8001b34 <HAL_GPIO_Init+0x2a8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d007      	beq.n	8001a22 <HAL_GPIO_Init+0x196>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_GPIO_Init+0x192>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x1a0>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e004      	b.n	8001a2c <HAL_GPIO_Init+0x1a0>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_Init+0x1a0>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x1a0>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2e:	f002 0203 	and.w	r2, r2, #3
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	4093      	lsls	r3, r2
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3c:	493a      	ldr	r1, [pc, #232]	; (8001b28 <HAL_GPIO_Init+0x29c>)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a56:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4938      	ldr	r1, [pc, #224]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
 8001a62:	e006      	b.n	8001a72 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	4933      	ldr	r1, [pc, #204]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	492e      	ldr	r1, [pc, #184]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
 8001a8a:	e006      	b.n	8001a9a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4929      	ldr	r1, [pc, #164]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d006      	beq.n	8001ab4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	4924      	ldr	r1, [pc, #144]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
 8001ab2:	e006      	b.n	8001ac2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	491f      	ldr	r1, [pc, #124]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	491a      	ldr	r1, [pc, #104]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60cb      	str	r3, [r1, #12]
 8001ada:	e006      	b.n	8001aea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	4915      	ldr	r1, [pc, #84]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	3301      	adds	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	fa22 f303 	lsr.w	r3, r2, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f47f aed0 	bne.w	80018a0 <HAL_GPIO_Init+0x14>
  }
}
 8001b00:	bf00      	nop
 8001b02:	372c      	adds	r7, #44	; 0x2c
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	10210000 	.word	0x10210000
 8001b10:	10110000 	.word	0x10110000
 8001b14:	10120000 	.word	0x10120000
 8001b18:	10310000 	.word	0x10310000
 8001b1c:	10320000 	.word	0x10320000
 8001b20:	10220000 	.word	0x10220000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40010800 	.word	0x40010800
 8001b30:	40010c00 	.word	0x40010c00
 8001b34:	40011000 	.word	0x40011000
 8001b38:	40011400 	.word	0x40011400
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b5c:	e003      	b.n	8001b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	041a      	lsls	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	611a      	str	r2, [r3, #16]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e26c      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8087 	beq.w	8001c9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b90:	4b92      	ldr	r3, [pc, #584]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d00c      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b9c:	4b8f      	ldr	r3, [pc, #572]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d112      	bne.n	8001bce <HAL_RCC_OscConfig+0x5e>
 8001ba8:	4b8c      	ldr	r3, [pc, #560]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb4:	d10b      	bne.n	8001bce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb6:	4b89      	ldr	r3, [pc, #548]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d06c      	beq.n	8001c9c <HAL_RCC_OscConfig+0x12c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d168      	bne.n	8001c9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e246      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x76>
 8001bd8:	4b80      	ldr	r3, [pc, #512]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a7f      	ldr	r2, [pc, #508]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e02e      	b.n	8001c44 <HAL_RCC_OscConfig+0xd4>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x98>
 8001bee:	4b7b      	ldr	r3, [pc, #492]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a7a      	ldr	r2, [pc, #488]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a77      	ldr	r2, [pc, #476]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e01d      	b.n	8001c44 <HAL_RCC_OscConfig+0xd4>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0xbc>
 8001c12:	4b72      	ldr	r3, [pc, #456]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a71      	ldr	r2, [pc, #452]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a6e      	ldr	r2, [pc, #440]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e00b      	b.n	8001c44 <HAL_RCC_OscConfig+0xd4>
 8001c2c:	4b6b      	ldr	r3, [pc, #428]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a6a      	ldr	r2, [pc, #424]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a67      	ldr	r2, [pc, #412]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7fe ff3a 	bl	8000ac4 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c54:	f7fe ff36 	bl	8000ac4 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	; 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e1fa      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	4b5d      	ldr	r3, [pc, #372]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0xe4>
 8001c72:	e014      	b.n	8001c9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7fe ff26 	bl	8000ac4 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7fe ff22 	bl	8000ac4 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e1e6      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8e:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x10c>
 8001c9a:	e000      	b.n	8001c9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d063      	beq.n	8001d72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001caa:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00b      	beq.n	8001cce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cb6:	4b49      	ldr	r3, [pc, #292]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d11c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x18c>
 8001cc2:	4b46      	ldr	r3, [pc, #280]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d116      	bne.n	8001cfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cce:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x176>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e1ba      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4939      	ldr	r1, [pc, #228]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	e03a      	b.n	8001d72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d020      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7fe fedb 	bl	8000ac4 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d12:	f7fe fed7 	bl	8000ac4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e19b      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d24:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d30:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4927      	ldr	r1, [pc, #156]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]
 8001d44:	e015      	b.n	8001d72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7fe feba 	bl	8000ac4 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d54:	f7fe feb6 	bl	8000ac4 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e17a      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d03a      	beq.n	8001df4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d019      	beq.n	8001dba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_RCC_OscConfig+0x274>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8c:	f7fe fe9a 	bl	8000ac4 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d94:	f7fe fe96 	bl	8000ac4 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e15a      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_RCC_OscConfig+0x26c>)
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001db2:	2001      	movs	r0, #1
 8001db4:	f000 fada 	bl	800236c <RCC_Delay>
 8001db8:	e01c      	b.n	8001df4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc0:	f7fe fe80 	bl	8000ac4 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc6:	e00f      	b.n	8001de8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7fe fe7c 	bl	8000ac4 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d908      	bls.n	8001de8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e140      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	42420000 	.word	0x42420000
 8001de4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de8:	4b9e      	ldr	r3, [pc, #632]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1e9      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80a6 	beq.w	8001f4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e06:	4b97      	ldr	r3, [pc, #604]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10d      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	4b94      	ldr	r3, [pc, #592]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a93      	ldr	r2, [pc, #588]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	61d3      	str	r3, [r2, #28]
 8001e1e:	4b91      	ldr	r3, [pc, #580]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	4b8e      	ldr	r3, [pc, #568]	; (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d118      	bne.n	8001e6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3a:	4b8b      	ldr	r3, [pc, #556]	; (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a8a      	ldr	r2, [pc, #552]	; (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e46:	f7fe fe3d 	bl	8000ac4 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4e:	f7fe fe39 	bl	8000ac4 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b64      	cmp	r3, #100	; 0x64
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e0fd      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e60:	4b81      	ldr	r3, [pc, #516]	; (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x312>
 8001e74:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4a7a      	ldr	r2, [pc, #488]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6213      	str	r3, [r2, #32]
 8001e80:	e02d      	b.n	8001ede <HAL_RCC_OscConfig+0x36e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x334>
 8001e8a:	4b76      	ldr	r3, [pc, #472]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a75      	ldr	r2, [pc, #468]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	4b73      	ldr	r3, [pc, #460]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a72      	ldr	r2, [pc, #456]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	e01c      	b.n	8001ede <HAL_RCC_OscConfig+0x36e>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d10c      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x356>
 8001eac:	4b6d      	ldr	r3, [pc, #436]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a6c      	ldr	r2, [pc, #432]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6213      	str	r3, [r2, #32]
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a69      	ldr	r2, [pc, #420]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	e00b      	b.n	8001ede <HAL_RCC_OscConfig+0x36e>
 8001ec6:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a66      	ldr	r2, [pc, #408]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	6213      	str	r3, [r2, #32]
 8001ed2:	4b64      	ldr	r3, [pc, #400]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a63      	ldr	r2, [pc, #396]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	f023 0304 	bic.w	r3, r3, #4
 8001edc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d015      	beq.n	8001f12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7fe fded 	bl	8000ac4 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7fe fde9 	bl	8000ac4 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0ab      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	4b57      	ldr	r3, [pc, #348]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0ee      	beq.n	8001eee <HAL_RCC_OscConfig+0x37e>
 8001f10:	e014      	b.n	8001f3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7fe fdd7 	bl	8000ac4 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7fe fdd3 	bl	8000ac4 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e095      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f30:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1ee      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d105      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f42:	4b48      	ldr	r3, [pc, #288]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a47      	ldr	r2, [pc, #284]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8081 	beq.w	800205a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f58:	4b42      	ldr	r3, [pc, #264]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d061      	beq.n	8002028 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d146      	bne.n	8001ffa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6c:	4b3f      	ldr	r3, [pc, #252]	; (800206c <HAL_RCC_OscConfig+0x4fc>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7fe fda7 	bl	8000ac4 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7fe fda3 	bl	8000ac4 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e067      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	d108      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fa2:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	492d      	ldr	r1, [pc, #180]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a19      	ldr	r1, [r3, #32]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	4927      	ldr	r1, [pc, #156]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_OscConfig+0x4fc>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fd77 	bl	8000ac4 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7fe fd73 	bl	8000ac4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e037      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x46a>
 8001ff8:	e02f      	b.n	800205a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_RCC_OscConfig+0x4fc>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7fe fd60 	bl	8000ac4 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7fe fd5c 	bl	8000ac4 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e020      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x498>
 8002026:	e018      	b.n	800205a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e013      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	429a      	cmp	r2, r3
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	40007000 	.word	0x40007000
 800206c:	42420060 	.word	0x42420060

08002070 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0d0      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d910      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b67      	ldr	r3, [pc, #412]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4965      	ldr	r1, [pc, #404]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b63      	ldr	r3, [pc, #396]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0b8      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020cc:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a58      	ldr	r2, [pc, #352]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e4:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a52      	ldr	r2, [pc, #328]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b50      	ldr	r3, [pc, #320]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	494d      	ldr	r1, [pc, #308]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d040      	beq.n	8002190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d115      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e07f      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	4b41      	ldr	r3, [pc, #260]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e073      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06b      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214e:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f023 0203 	bic.w	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4936      	ldr	r1, [pc, #216]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002160:	f7fe fcb0 	bl	8000ac4 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	e00a      	b.n	800217e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002168:	f7fe fcac 	bl	8000ac4 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e053      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 020c 	and.w	r2, r3, #12
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	d1eb      	bne.n	8002168 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d210      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 0207 	bic.w	r2, r3, #7
 80021a6:	4922      	ldr	r1, [pc, #136]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e032      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4916      	ldr	r1, [pc, #88]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021fe:	f000 f821 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 8002202:	4601      	mov	r1, r0
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <HAL_RCC_ClockConfig+0x1c8>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	fa21 f303 	lsr.w	r3, r1, r3
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <HAL_RCC_ClockConfig+0x1cc>)
 8002218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_RCC_ClockConfig+0x1d0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fc0e 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40022000 	.word	0x40022000
 8002234:	40021000 	.word	0x40021000
 8002238:	080032d0 	.word	0x080032d0
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002244:	b490      	push	{r4, r7}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800224c:	1d3c      	adds	r4, r7, #4
 800224e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800226e:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b04      	cmp	r3, #4
 800227c:	d002      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x40>
 800227e:	2b08      	cmp	r3, #8
 8002280:	d003      	beq.n	800228a <HAL_RCC_GetSysClockFreq+0x46>
 8002282:	e02d      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002284:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002286:	623b      	str	r3, [r7, #32]
      break;
 8002288:	e02d      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	0c9b      	lsrs	r3, r3, #18
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002296:	4413      	add	r3, r2
 8002298:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800229c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	0c5b      	lsrs	r3, r3, #17
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022b6:	4413      	add	r3, r2
 80022b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022c2:	fb02 f203 	mul.w	r2, r2, r3
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
 80022ce:	e004      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	623b      	str	r3, [r7, #32]
      break;
 80022de:	e002      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022e2:	623b      	str	r3, [r7, #32]
      break;
 80022e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e6:	6a3b      	ldr	r3, [r7, #32]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3728      	adds	r7, #40	; 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc90      	pop	{r4, r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	080032a4 	.word	0x080032a4
 80022f8:	080032b4 	.word	0x080032b4
 80022fc:	40021000 	.word	0x40021000
 8002300:	007a1200 	.word	0x007a1200
 8002304:	003d0900 	.word	0x003d0900

08002308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <HAL_RCC_GetHCLKFreq+0x10>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002320:	f7ff fff2 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002324:	4601      	mov	r1, r0
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4a03      	ldr	r2, [pc, #12]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	080032e0 	.word	0x080032e0

08002344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002348:	f7ff ffde 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 800234c:	4601      	mov	r1, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	0adb      	lsrs	r3, r3, #11
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4a03      	ldr	r2, [pc, #12]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	080032e0 	.word	0x080032e0

0800236c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002374:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <RCC_Delay+0x34>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <RCC_Delay+0x38>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0a5b      	lsrs	r3, r3, #9
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002388:	bf00      	nop
  }
  while (Delay --);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1e5a      	subs	r2, r3, #1
 800238e:	60fa      	str	r2, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f9      	bne.n	8002388 <RCC_Delay+0x1c>
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000000 	.word	0x20000000
 80023a4:	10624dd3 	.word	0x10624dd3

080023a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d07d      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c8:	4b4f      	ldr	r3, [pc, #316]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10d      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	4a4b      	ldr	r2, [pc, #300]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	61d3      	str	r3, [r2, #28]
 80023e0:	4b49      	ldr	r3, [pc, #292]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b46      	ldr	r3, [pc, #280]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d118      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fc:	4b43      	ldr	r3, [pc, #268]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a42      	ldr	r2, [pc, #264]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002406:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002408:	f7fe fb5c 	bl	8000ac4 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	e008      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002410:	f7fe fb58 	bl	8000ac4 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e06d      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	4b3a      	ldr	r3, [pc, #232]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800242e:	4b36      	ldr	r3, [pc, #216]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002436:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d02e      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	429a      	cmp	r2, r3
 800244a:	d027      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800244c:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002454:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002456:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800245c:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002462:	4a29      	ldr	r2, [pc, #164]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d014      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe fb27 	bl	8000ac4 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7fe fb23 	bl	8000ac4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e036      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ee      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4917      	ldr	r1, [pc, #92]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4a13      	ldr	r2, [pc, #76]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	490b      	ldr	r1, [pc, #44]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	4904      	ldr	r1, [pc, #16]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	40007000 	.word	0x40007000
 8002510:	42420440 	.word	0x42420440

08002514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e03f      	b.n	80025a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe f968 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2224      	movs	r2, #36	; 0x24
 8002544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f905 	bl	8002768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800256c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800257c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800258c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b08a      	sub	sp, #40	; 0x28
 80025b2:	af02      	add	r7, sp, #8
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	d17c      	bne.n	80026c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_UART_Transmit+0x2c>
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e075      	b.n	80026ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_UART_Transmit+0x3e>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e06e      	b.n	80026ca <HAL_UART_Transmit+0x11c>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2221      	movs	r2, #33	; 0x21
 80025fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002602:	f7fe fa5f 	bl	8000ac4 <HAL_GetTick>
 8002606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	88fa      	ldrh	r2, [r7, #6]
 800260c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	88fa      	ldrh	r2, [r7, #6]
 8002612:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261c:	d108      	bne.n	8002630 <HAL_UART_Transmit+0x82>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d104      	bne.n	8002630 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	e003      	b.n	8002638 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002634:	2300      	movs	r3, #0
 8002636:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002640:	e02a      	b.n	8002698 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2200      	movs	r2, #0
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f840 	bl	80026d2 <UART_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e036      	b.n	80026ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10b      	bne.n	800267a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	3302      	adds	r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	e007      	b.n	800268a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	3301      	adds	r3, #1
 8002688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1cf      	bne.n	8002642 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2200      	movs	r2, #0
 80026aa:	2140      	movs	r1, #64	; 0x40
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f810 	bl	80026d2 <UART_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e006      	b.n	80026ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e000      	b.n	80026ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026c8:	2302      	movs	r3, #2
  }
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	4613      	mov	r3, r2
 80026e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e2:	e02c      	b.n	800273e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ea:	d028      	beq.n	800273e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <UART_WaitOnFlagUntilTimeout+0x30>
 80026f2:	f7fe f9e7 	bl	8000ac4 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d21d      	bcs.n	800273e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002710:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e00f      	b.n	800275e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4013      	ands	r3, r2
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	429a      	cmp	r2, r3
 800274c:	bf0c      	ite	eq
 800274e:	2301      	moveq	r3, #1
 8002750:	2300      	movne	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	429a      	cmp	r2, r3
 800275a:	d0c3      	beq.n	80026e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027a2:	f023 030c 	bic.w	r3, r3, #12
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2c      	ldr	r2, [pc, #176]	; (800287c <UART_SetConfig+0x114>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d103      	bne.n	80027d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027d0:	f7ff fdb8 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	e002      	b.n	80027de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027d8:	f7ff fda0 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 80027dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009a      	lsls	r2, r3, #2
 80027e8:	441a      	add	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <UART_SetConfig+0x118>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	0119      	lsls	r1, r3, #4
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009a      	lsls	r2, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fbb2 f2f3 	udiv	r2, r2, r3
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <UART_SetConfig+0x118>)
 8002816:	fba3 0302 	umull	r0, r3, r3, r2
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2064      	movs	r0, #100	; 0x64
 800281e:	fb00 f303 	mul.w	r3, r0, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	4a15      	ldr	r2, [pc, #84]	; (8002880 <UART_SetConfig+0x118>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002834:	4419      	add	r1, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	009a      	lsls	r2, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fbb2 f2f3 	udiv	r2, r2, r3
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <UART_SetConfig+0x118>)
 800284e:	fba3 0302 	umull	r0, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2064      	movs	r0, #100	; 0x64
 8002856:	fb00 f303 	mul.w	r3, r0, r3
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	3332      	adds	r3, #50	; 0x32
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <UART_SetConfig+0x118>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	f003 020f 	and.w	r2, r3, #15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	440a      	add	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40013800 	.word	0x40013800
 8002880:	51eb851f 	.word	0x51eb851f

08002884 <__cxa_pure_virtual>:
 8002884:	b508      	push	{r3, lr}
 8002886:	f000 f80d 	bl	80028a4 <_ZSt9terminatev>

0800288a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800288a:	b508      	push	{r3, lr}
 800288c:	4780      	blx	r0
 800288e:	f000 f80e 	bl	80028ae <abort>
	...

08002894 <_ZSt13get_terminatev>:
 8002894:	4b02      	ldr	r3, [pc, #8]	; (80028a0 <_ZSt13get_terminatev+0xc>)
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	f3bf 8f5b 	dmb	ish
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	2000000c 	.word	0x2000000c

080028a4 <_ZSt9terminatev>:
 80028a4:	b508      	push	{r3, lr}
 80028a6:	f7ff fff5 	bl	8002894 <_ZSt13get_terminatev>
 80028aa:	f7ff ffee 	bl	800288a <_ZN10__cxxabiv111__terminateEPFvvE>

080028ae <abort>:
 80028ae:	b508      	push	{r3, lr}
 80028b0:	2006      	movs	r0, #6
 80028b2:	f000 f945 	bl	8002b40 <raise>
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7fe f83f 	bl	800093a <_exit>

080028bc <__errno>:
 80028bc:	4b01      	ldr	r3, [pc, #4]	; (80028c4 <__errno+0x8>)
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000010 	.word	0x20000010

080028c8 <__libc_init_array>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	2500      	movs	r5, #0
 80028cc:	4e0c      	ldr	r6, [pc, #48]	; (8002900 <__libc_init_array+0x38>)
 80028ce:	4c0d      	ldr	r4, [pc, #52]	; (8002904 <__libc_init_array+0x3c>)
 80028d0:	1ba4      	subs	r4, r4, r6
 80028d2:	10a4      	asrs	r4, r4, #2
 80028d4:	42a5      	cmp	r5, r4
 80028d6:	d109      	bne.n	80028ec <__libc_init_array+0x24>
 80028d8:	f000 fc78 	bl	80031cc <_init>
 80028dc:	2500      	movs	r5, #0
 80028de:	4e0a      	ldr	r6, [pc, #40]	; (8002908 <__libc_init_array+0x40>)
 80028e0:	4c0a      	ldr	r4, [pc, #40]	; (800290c <__libc_init_array+0x44>)
 80028e2:	1ba4      	subs	r4, r4, r6
 80028e4:	10a4      	asrs	r4, r4, #2
 80028e6:	42a5      	cmp	r5, r4
 80028e8:	d105      	bne.n	80028f6 <__libc_init_array+0x2e>
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
 80028ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028f0:	4798      	blx	r3
 80028f2:	3501      	adds	r5, #1
 80028f4:	e7ee      	b.n	80028d4 <__libc_init_array+0xc>
 80028f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028fa:	4798      	blx	r3
 80028fc:	3501      	adds	r5, #1
 80028fe:	e7f2      	b.n	80028e6 <__libc_init_array+0x1e>
 8002900:	0800331c 	.word	0x0800331c
 8002904:	0800331c 	.word	0x0800331c
 8002908:	0800331c 	.word	0x0800331c
 800290c:	08003324 	.word	0x08003324

08002910 <memchr>:
 8002910:	b510      	push	{r4, lr}
 8002912:	b2c9      	uxtb	r1, r1
 8002914:	4402      	add	r2, r0
 8002916:	4290      	cmp	r0, r2
 8002918:	4603      	mov	r3, r0
 800291a:	d101      	bne.n	8002920 <memchr+0x10>
 800291c:	2300      	movs	r3, #0
 800291e:	e003      	b.n	8002928 <memchr+0x18>
 8002920:	781c      	ldrb	r4, [r3, #0]
 8002922:	3001      	adds	r0, #1
 8002924:	428c      	cmp	r4, r1
 8002926:	d1f6      	bne.n	8002916 <memchr+0x6>
 8002928:	4618      	mov	r0, r3
 800292a:	bd10      	pop	{r4, pc}

0800292c <memcpy>:
 800292c:	b510      	push	{r4, lr}
 800292e:	1e43      	subs	r3, r0, #1
 8002930:	440a      	add	r2, r1
 8002932:	4291      	cmp	r1, r2
 8002934:	d100      	bne.n	8002938 <memcpy+0xc>
 8002936:	bd10      	pop	{r4, pc}
 8002938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800293c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002940:	e7f7      	b.n	8002932 <memcpy+0x6>

08002942 <memmove>:
 8002942:	4288      	cmp	r0, r1
 8002944:	b510      	push	{r4, lr}
 8002946:	eb01 0302 	add.w	r3, r1, r2
 800294a:	d807      	bhi.n	800295c <memmove+0x1a>
 800294c:	1e42      	subs	r2, r0, #1
 800294e:	4299      	cmp	r1, r3
 8002950:	d00a      	beq.n	8002968 <memmove+0x26>
 8002952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002956:	f802 4f01 	strb.w	r4, [r2, #1]!
 800295a:	e7f8      	b.n	800294e <memmove+0xc>
 800295c:	4283      	cmp	r3, r0
 800295e:	d9f5      	bls.n	800294c <memmove+0xa>
 8002960:	1881      	adds	r1, r0, r2
 8002962:	1ad2      	subs	r2, r2, r3
 8002964:	42d3      	cmn	r3, r2
 8002966:	d100      	bne.n	800296a <memmove+0x28>
 8002968:	bd10      	pop	{r4, pc}
 800296a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800296e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002972:	e7f7      	b.n	8002964 <memmove+0x22>

08002974 <memset>:
 8002974:	4603      	mov	r3, r0
 8002976:	4402      	add	r2, r0
 8002978:	4293      	cmp	r3, r2
 800297a:	d100      	bne.n	800297e <memset+0xa>
 800297c:	4770      	bx	lr
 800297e:	f803 1b01 	strb.w	r1, [r3], #1
 8002982:	e7f9      	b.n	8002978 <memset+0x4>

08002984 <_free_r>:
 8002984:	b538      	push	{r3, r4, r5, lr}
 8002986:	4605      	mov	r5, r0
 8002988:	2900      	cmp	r1, #0
 800298a:	d043      	beq.n	8002a14 <_free_r+0x90>
 800298c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002990:	1f0c      	subs	r4, r1, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	bfb8      	it	lt
 8002996:	18e4      	addlt	r4, r4, r3
 8002998:	f000 f90e 	bl	8002bb8 <__malloc_lock>
 800299c:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <_free_r+0x94>)
 800299e:	6813      	ldr	r3, [r2, #0]
 80029a0:	4610      	mov	r0, r2
 80029a2:	b933      	cbnz	r3, 80029b2 <_free_r+0x2e>
 80029a4:	6063      	str	r3, [r4, #4]
 80029a6:	6014      	str	r4, [r2, #0]
 80029a8:	4628      	mov	r0, r5
 80029aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029ae:	f000 b904 	b.w	8002bba <__malloc_unlock>
 80029b2:	42a3      	cmp	r3, r4
 80029b4:	d90b      	bls.n	80029ce <_free_r+0x4a>
 80029b6:	6821      	ldr	r1, [r4, #0]
 80029b8:	1862      	adds	r2, r4, r1
 80029ba:	4293      	cmp	r3, r2
 80029bc:	bf01      	itttt	eq
 80029be:	681a      	ldreq	r2, [r3, #0]
 80029c0:	685b      	ldreq	r3, [r3, #4]
 80029c2:	1852      	addeq	r2, r2, r1
 80029c4:	6022      	streq	r2, [r4, #0]
 80029c6:	6063      	str	r3, [r4, #4]
 80029c8:	6004      	str	r4, [r0, #0]
 80029ca:	e7ed      	b.n	80029a8 <_free_r+0x24>
 80029cc:	4613      	mov	r3, r2
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	b10a      	cbz	r2, 80029d6 <_free_r+0x52>
 80029d2:	42a2      	cmp	r2, r4
 80029d4:	d9fa      	bls.n	80029cc <_free_r+0x48>
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	1858      	adds	r0, r3, r1
 80029da:	42a0      	cmp	r0, r4
 80029dc:	d10b      	bne.n	80029f6 <_free_r+0x72>
 80029de:	6820      	ldr	r0, [r4, #0]
 80029e0:	4401      	add	r1, r0
 80029e2:	1858      	adds	r0, r3, r1
 80029e4:	4282      	cmp	r2, r0
 80029e6:	6019      	str	r1, [r3, #0]
 80029e8:	d1de      	bne.n	80029a8 <_free_r+0x24>
 80029ea:	6810      	ldr	r0, [r2, #0]
 80029ec:	6852      	ldr	r2, [r2, #4]
 80029ee:	4401      	add	r1, r0
 80029f0:	6019      	str	r1, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	e7d8      	b.n	80029a8 <_free_r+0x24>
 80029f6:	d902      	bls.n	80029fe <_free_r+0x7a>
 80029f8:	230c      	movs	r3, #12
 80029fa:	602b      	str	r3, [r5, #0]
 80029fc:	e7d4      	b.n	80029a8 <_free_r+0x24>
 80029fe:	6820      	ldr	r0, [r4, #0]
 8002a00:	1821      	adds	r1, r4, r0
 8002a02:	428a      	cmp	r2, r1
 8002a04:	bf01      	itttt	eq
 8002a06:	6811      	ldreq	r1, [r2, #0]
 8002a08:	6852      	ldreq	r2, [r2, #4]
 8002a0a:	1809      	addeq	r1, r1, r0
 8002a0c:	6021      	streq	r1, [r4, #0]
 8002a0e:	6062      	str	r2, [r4, #4]
 8002a10:	605c      	str	r4, [r3, #4]
 8002a12:	e7c9      	b.n	80029a8 <_free_r+0x24>
 8002a14:	bd38      	pop	{r3, r4, r5, pc}
 8002a16:	bf00      	nop
 8002a18:	20000160 	.word	0x20000160

08002a1c <_malloc_r>:
 8002a1c:	b570      	push	{r4, r5, r6, lr}
 8002a1e:	1ccd      	adds	r5, r1, #3
 8002a20:	f025 0503 	bic.w	r5, r5, #3
 8002a24:	3508      	adds	r5, #8
 8002a26:	2d0c      	cmp	r5, #12
 8002a28:	bf38      	it	cc
 8002a2a:	250c      	movcc	r5, #12
 8002a2c:	2d00      	cmp	r5, #0
 8002a2e:	4606      	mov	r6, r0
 8002a30:	db01      	blt.n	8002a36 <_malloc_r+0x1a>
 8002a32:	42a9      	cmp	r1, r5
 8002a34:	d903      	bls.n	8002a3e <_malloc_r+0x22>
 8002a36:	230c      	movs	r3, #12
 8002a38:	6033      	str	r3, [r6, #0]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
 8002a3e:	f000 f8bb 	bl	8002bb8 <__malloc_lock>
 8002a42:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <_malloc_r+0xac>)
 8002a44:	6814      	ldr	r4, [r2, #0]
 8002a46:	4621      	mov	r1, r4
 8002a48:	b991      	cbnz	r1, 8002a70 <_malloc_r+0x54>
 8002a4a:	4c20      	ldr	r4, [pc, #128]	; (8002acc <_malloc_r+0xb0>)
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	b91b      	cbnz	r3, 8002a58 <_malloc_r+0x3c>
 8002a50:	4630      	mov	r0, r6
 8002a52:	f000 f83d 	bl	8002ad0 <_sbrk_r>
 8002a56:	6020      	str	r0, [r4, #0]
 8002a58:	4629      	mov	r1, r5
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	f000 f838 	bl	8002ad0 <_sbrk_r>
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	d124      	bne.n	8002aae <_malloc_r+0x92>
 8002a64:	230c      	movs	r3, #12
 8002a66:	4630      	mov	r0, r6
 8002a68:	6033      	str	r3, [r6, #0]
 8002a6a:	f000 f8a6 	bl	8002bba <__malloc_unlock>
 8002a6e:	e7e4      	b.n	8002a3a <_malloc_r+0x1e>
 8002a70:	680b      	ldr	r3, [r1, #0]
 8002a72:	1b5b      	subs	r3, r3, r5
 8002a74:	d418      	bmi.n	8002aa8 <_malloc_r+0x8c>
 8002a76:	2b0b      	cmp	r3, #11
 8002a78:	d90f      	bls.n	8002a9a <_malloc_r+0x7e>
 8002a7a:	600b      	str	r3, [r1, #0]
 8002a7c:	18cc      	adds	r4, r1, r3
 8002a7e:	50cd      	str	r5, [r1, r3]
 8002a80:	4630      	mov	r0, r6
 8002a82:	f000 f89a 	bl	8002bba <__malloc_unlock>
 8002a86:	f104 000b 	add.w	r0, r4, #11
 8002a8a:	1d23      	adds	r3, r4, #4
 8002a8c:	f020 0007 	bic.w	r0, r0, #7
 8002a90:	1ac3      	subs	r3, r0, r3
 8002a92:	d0d3      	beq.n	8002a3c <_malloc_r+0x20>
 8002a94:	425a      	negs	r2, r3
 8002a96:	50e2      	str	r2, [r4, r3]
 8002a98:	e7d0      	b.n	8002a3c <_malloc_r+0x20>
 8002a9a:	684b      	ldr	r3, [r1, #4]
 8002a9c:	428c      	cmp	r4, r1
 8002a9e:	bf16      	itet	ne
 8002aa0:	6063      	strne	r3, [r4, #4]
 8002aa2:	6013      	streq	r3, [r2, #0]
 8002aa4:	460c      	movne	r4, r1
 8002aa6:	e7eb      	b.n	8002a80 <_malloc_r+0x64>
 8002aa8:	460c      	mov	r4, r1
 8002aaa:	6849      	ldr	r1, [r1, #4]
 8002aac:	e7cc      	b.n	8002a48 <_malloc_r+0x2c>
 8002aae:	1cc4      	adds	r4, r0, #3
 8002ab0:	f024 0403 	bic.w	r4, r4, #3
 8002ab4:	42a0      	cmp	r0, r4
 8002ab6:	d005      	beq.n	8002ac4 <_malloc_r+0xa8>
 8002ab8:	1a21      	subs	r1, r4, r0
 8002aba:	4630      	mov	r0, r6
 8002abc:	f000 f808 	bl	8002ad0 <_sbrk_r>
 8002ac0:	3001      	adds	r0, #1
 8002ac2:	d0cf      	beq.n	8002a64 <_malloc_r+0x48>
 8002ac4:	6025      	str	r5, [r4, #0]
 8002ac6:	e7db      	b.n	8002a80 <_malloc_r+0x64>
 8002ac8:	20000160 	.word	0x20000160
 8002acc:	20000164 	.word	0x20000164

08002ad0 <_sbrk_r>:
 8002ad0:	b538      	push	{r3, r4, r5, lr}
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	4c05      	ldr	r4, [pc, #20]	; (8002aec <_sbrk_r+0x1c>)
 8002ad6:	4605      	mov	r5, r0
 8002ad8:	4608      	mov	r0, r1
 8002ada:	6023      	str	r3, [r4, #0]
 8002adc:	f7fd ff38 	bl	8000950 <_sbrk>
 8002ae0:	1c43      	adds	r3, r0, #1
 8002ae2:	d102      	bne.n	8002aea <_sbrk_r+0x1a>
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	b103      	cbz	r3, 8002aea <_sbrk_r+0x1a>
 8002ae8:	602b      	str	r3, [r5, #0]
 8002aea:	bd38      	pop	{r3, r4, r5, pc}
 8002aec:	2000016c 	.word	0x2000016c

08002af0 <_raise_r>:
 8002af0:	291f      	cmp	r1, #31
 8002af2:	b538      	push	{r3, r4, r5, lr}
 8002af4:	4604      	mov	r4, r0
 8002af6:	460d      	mov	r5, r1
 8002af8:	d904      	bls.n	8002b04 <_raise_r+0x14>
 8002afa:	2316      	movs	r3, #22
 8002afc:	6003      	str	r3, [r0, #0]
 8002afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b02:	bd38      	pop	{r3, r4, r5, pc}
 8002b04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b06:	b112      	cbz	r2, 8002b0e <_raise_r+0x1e>
 8002b08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002b0c:	b94b      	cbnz	r3, 8002b22 <_raise_r+0x32>
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f000 f830 	bl	8002b74 <_getpid_r>
 8002b14:	462a      	mov	r2, r5
 8002b16:	4601      	mov	r1, r0
 8002b18:	4620      	mov	r0, r4
 8002b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b1e:	f000 b817 	b.w	8002b50 <_kill_r>
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d00a      	beq.n	8002b3c <_raise_r+0x4c>
 8002b26:	1c59      	adds	r1, r3, #1
 8002b28:	d103      	bne.n	8002b32 <_raise_r+0x42>
 8002b2a:	2316      	movs	r3, #22
 8002b2c:	6003      	str	r3, [r0, #0]
 8002b2e:	2001      	movs	r0, #1
 8002b30:	e7e7      	b.n	8002b02 <_raise_r+0x12>
 8002b32:	2400      	movs	r4, #0
 8002b34:	4628      	mov	r0, r5
 8002b36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002b3a:	4798      	blx	r3
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e7e0      	b.n	8002b02 <_raise_r+0x12>

08002b40 <raise>:
 8002b40:	4b02      	ldr	r3, [pc, #8]	; (8002b4c <raise+0xc>)
 8002b42:	4601      	mov	r1, r0
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	f7ff bfd3 	b.w	8002af0 <_raise_r>
 8002b4a:	bf00      	nop
 8002b4c:	20000010 	.word	0x20000010

08002b50 <_kill_r>:
 8002b50:	b538      	push	{r3, r4, r5, lr}
 8002b52:	2300      	movs	r3, #0
 8002b54:	4c06      	ldr	r4, [pc, #24]	; (8002b70 <_kill_r+0x20>)
 8002b56:	4605      	mov	r5, r0
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	6023      	str	r3, [r4, #0]
 8002b5e:	f7fd fedc 	bl	800091a <_kill>
 8002b62:	1c43      	adds	r3, r0, #1
 8002b64:	d102      	bne.n	8002b6c <_kill_r+0x1c>
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	b103      	cbz	r3, 8002b6c <_kill_r+0x1c>
 8002b6a:	602b      	str	r3, [r5, #0]
 8002b6c:	bd38      	pop	{r3, r4, r5, pc}
 8002b6e:	bf00      	nop
 8002b70:	2000016c 	.word	0x2000016c

08002b74 <_getpid_r>:
 8002b74:	f7fd beca 	b.w	800090c <_getpid>

08002b78 <_vsiprintf_r>:
 8002b78:	b500      	push	{lr}
 8002b7a:	b09b      	sub	sp, #108	; 0x6c
 8002b7c:	9100      	str	r1, [sp, #0]
 8002b7e:	9104      	str	r1, [sp, #16]
 8002b80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b84:	9105      	str	r1, [sp, #20]
 8002b86:	9102      	str	r1, [sp, #8]
 8002b88:	4905      	ldr	r1, [pc, #20]	; (8002ba0 <_vsiprintf_r+0x28>)
 8002b8a:	9103      	str	r1, [sp, #12]
 8002b8c:	4669      	mov	r1, sp
 8002b8e:	f000 f86f 	bl	8002c70 <_svfiprintf_r>
 8002b92:	2200      	movs	r2, #0
 8002b94:	9b00      	ldr	r3, [sp, #0]
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	b01b      	add	sp, #108	; 0x6c
 8002b9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b9e:	bf00      	nop
 8002ba0:	ffff0208 	.word	0xffff0208

08002ba4 <vsiprintf>:
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	460a      	mov	r2, r1
 8002ba8:	4601      	mov	r1, r0
 8002baa:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <vsiprintf+0x10>)
 8002bac:	6800      	ldr	r0, [r0, #0]
 8002bae:	f7ff bfe3 	b.w	8002b78 <_vsiprintf_r>
 8002bb2:	bf00      	nop
 8002bb4:	20000010 	.word	0x20000010

08002bb8 <__malloc_lock>:
 8002bb8:	4770      	bx	lr

08002bba <__malloc_unlock>:
 8002bba:	4770      	bx	lr

08002bbc <__ssputs_r>:
 8002bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc0:	688e      	ldr	r6, [r1, #8]
 8002bc2:	4682      	mov	sl, r0
 8002bc4:	429e      	cmp	r6, r3
 8002bc6:	460c      	mov	r4, r1
 8002bc8:	4690      	mov	r8, r2
 8002bca:	4699      	mov	r9, r3
 8002bcc:	d837      	bhi.n	8002c3e <__ssputs_r+0x82>
 8002bce:	898a      	ldrh	r2, [r1, #12]
 8002bd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bd4:	d031      	beq.n	8002c3a <__ssputs_r+0x7e>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	6825      	ldr	r5, [r4, #0]
 8002bda:	6909      	ldr	r1, [r1, #16]
 8002bdc:	1a6f      	subs	r7, r5, r1
 8002bde:	6965      	ldr	r5, [r4, #20]
 8002be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002be4:	fb95 f5f3 	sdiv	r5, r5, r3
 8002be8:	f109 0301 	add.w	r3, r9, #1
 8002bec:	443b      	add	r3, r7
 8002bee:	429d      	cmp	r5, r3
 8002bf0:	bf38      	it	cc
 8002bf2:	461d      	movcc	r5, r3
 8002bf4:	0553      	lsls	r3, r2, #21
 8002bf6:	d530      	bpl.n	8002c5a <__ssputs_r+0x9e>
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	f7ff ff0f 	bl	8002a1c <_malloc_r>
 8002bfe:	4606      	mov	r6, r0
 8002c00:	b950      	cbnz	r0, 8002c18 <__ssputs_r+0x5c>
 8002c02:	230c      	movs	r3, #12
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c08:	f8ca 3000 	str.w	r3, [sl]
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c12:	81a3      	strh	r3, [r4, #12]
 8002c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c18:	463a      	mov	r2, r7
 8002c1a:	6921      	ldr	r1, [r4, #16]
 8002c1c:	f7ff fe86 	bl	800292c <memcpy>
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2a:	81a3      	strh	r3, [r4, #12]
 8002c2c:	6126      	str	r6, [r4, #16]
 8002c2e:	443e      	add	r6, r7
 8002c30:	6026      	str	r6, [r4, #0]
 8002c32:	464e      	mov	r6, r9
 8002c34:	6165      	str	r5, [r4, #20]
 8002c36:	1bed      	subs	r5, r5, r7
 8002c38:	60a5      	str	r5, [r4, #8]
 8002c3a:	454e      	cmp	r6, r9
 8002c3c:	d900      	bls.n	8002c40 <__ssputs_r+0x84>
 8002c3e:	464e      	mov	r6, r9
 8002c40:	4632      	mov	r2, r6
 8002c42:	4641      	mov	r1, r8
 8002c44:	6820      	ldr	r0, [r4, #0]
 8002c46:	f7ff fe7c 	bl	8002942 <memmove>
 8002c4a:	68a3      	ldr	r3, [r4, #8]
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	1b9b      	subs	r3, r3, r6
 8002c50:	60a3      	str	r3, [r4, #8]
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	441e      	add	r6, r3
 8002c56:	6026      	str	r6, [r4, #0]
 8002c58:	e7dc      	b.n	8002c14 <__ssputs_r+0x58>
 8002c5a:	462a      	mov	r2, r5
 8002c5c:	f000 fa88 	bl	8003170 <_realloc_r>
 8002c60:	4606      	mov	r6, r0
 8002c62:	2800      	cmp	r0, #0
 8002c64:	d1e2      	bne.n	8002c2c <__ssputs_r+0x70>
 8002c66:	6921      	ldr	r1, [r4, #16]
 8002c68:	4650      	mov	r0, sl
 8002c6a:	f7ff fe8b 	bl	8002984 <_free_r>
 8002c6e:	e7c8      	b.n	8002c02 <__ssputs_r+0x46>

08002c70 <_svfiprintf_r>:
 8002c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c74:	461d      	mov	r5, r3
 8002c76:	898b      	ldrh	r3, [r1, #12]
 8002c78:	b09d      	sub	sp, #116	; 0x74
 8002c7a:	061f      	lsls	r7, r3, #24
 8002c7c:	4680      	mov	r8, r0
 8002c7e:	460c      	mov	r4, r1
 8002c80:	4616      	mov	r6, r2
 8002c82:	d50f      	bpl.n	8002ca4 <_svfiprintf_r+0x34>
 8002c84:	690b      	ldr	r3, [r1, #16]
 8002c86:	b96b      	cbnz	r3, 8002ca4 <_svfiprintf_r+0x34>
 8002c88:	2140      	movs	r1, #64	; 0x40
 8002c8a:	f7ff fec7 	bl	8002a1c <_malloc_r>
 8002c8e:	6020      	str	r0, [r4, #0]
 8002c90:	6120      	str	r0, [r4, #16]
 8002c92:	b928      	cbnz	r0, 8002ca0 <_svfiprintf_r+0x30>
 8002c94:	230c      	movs	r3, #12
 8002c96:	f8c8 3000 	str.w	r3, [r8]
 8002c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c9e:	e0c8      	b.n	8002e32 <_svfiprintf_r+0x1c2>
 8002ca0:	2340      	movs	r3, #64	; 0x40
 8002ca2:	6163      	str	r3, [r4, #20]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ca8:	2320      	movs	r3, #32
 8002caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cae:	2330      	movs	r3, #48	; 0x30
 8002cb0:	f04f 0b01 	mov.w	fp, #1
 8002cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cb8:	9503      	str	r5, [sp, #12]
 8002cba:	4637      	mov	r7, r6
 8002cbc:	463d      	mov	r5, r7
 8002cbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002cc2:	b10b      	cbz	r3, 8002cc8 <_svfiprintf_r+0x58>
 8002cc4:	2b25      	cmp	r3, #37	; 0x25
 8002cc6:	d13e      	bne.n	8002d46 <_svfiprintf_r+0xd6>
 8002cc8:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ccc:	d00b      	beq.n	8002ce6 <_svfiprintf_r+0x76>
 8002cce:	4653      	mov	r3, sl
 8002cd0:	4632      	mov	r2, r6
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	4640      	mov	r0, r8
 8002cd6:	f7ff ff71 	bl	8002bbc <__ssputs_r>
 8002cda:	3001      	adds	r0, #1
 8002cdc:	f000 80a4 	beq.w	8002e28 <_svfiprintf_r+0x1b8>
 8002ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ce2:	4453      	add	r3, sl
 8002ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce6:	783b      	ldrb	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 809d 	beq.w	8002e28 <_svfiprintf_r+0x1b8>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cf8:	9304      	str	r3, [sp, #16]
 8002cfa:	9307      	str	r3, [sp, #28]
 8002cfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d00:	931a      	str	r3, [sp, #104]	; 0x68
 8002d02:	462f      	mov	r7, r5
 8002d04:	2205      	movs	r2, #5
 8002d06:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002d0a:	4850      	ldr	r0, [pc, #320]	; (8002e4c <_svfiprintf_r+0x1dc>)
 8002d0c:	f7ff fe00 	bl	8002910 <memchr>
 8002d10:	9b04      	ldr	r3, [sp, #16]
 8002d12:	b9d0      	cbnz	r0, 8002d4a <_svfiprintf_r+0xda>
 8002d14:	06d9      	lsls	r1, r3, #27
 8002d16:	bf44      	itt	mi
 8002d18:	2220      	movmi	r2, #32
 8002d1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d1e:	071a      	lsls	r2, r3, #28
 8002d20:	bf44      	itt	mi
 8002d22:	222b      	movmi	r2, #43	; 0x2b
 8002d24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d28:	782a      	ldrb	r2, [r5, #0]
 8002d2a:	2a2a      	cmp	r2, #42	; 0x2a
 8002d2c:	d015      	beq.n	8002d5a <_svfiprintf_r+0xea>
 8002d2e:	462f      	mov	r7, r5
 8002d30:	2000      	movs	r0, #0
 8002d32:	250a      	movs	r5, #10
 8002d34:	9a07      	ldr	r2, [sp, #28]
 8002d36:	4639      	mov	r1, r7
 8002d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d3c:	3b30      	subs	r3, #48	; 0x30
 8002d3e:	2b09      	cmp	r3, #9
 8002d40:	d94d      	bls.n	8002dde <_svfiprintf_r+0x16e>
 8002d42:	b1b8      	cbz	r0, 8002d74 <_svfiprintf_r+0x104>
 8002d44:	e00f      	b.n	8002d66 <_svfiprintf_r+0xf6>
 8002d46:	462f      	mov	r7, r5
 8002d48:	e7b8      	b.n	8002cbc <_svfiprintf_r+0x4c>
 8002d4a:	4a40      	ldr	r2, [pc, #256]	; (8002e4c <_svfiprintf_r+0x1dc>)
 8002d4c:	463d      	mov	r5, r7
 8002d4e:	1a80      	subs	r0, r0, r2
 8002d50:	fa0b f000 	lsl.w	r0, fp, r0
 8002d54:	4318      	orrs	r0, r3
 8002d56:	9004      	str	r0, [sp, #16]
 8002d58:	e7d3      	b.n	8002d02 <_svfiprintf_r+0x92>
 8002d5a:	9a03      	ldr	r2, [sp, #12]
 8002d5c:	1d11      	adds	r1, r2, #4
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	9103      	str	r1, [sp, #12]
 8002d62:	2a00      	cmp	r2, #0
 8002d64:	db01      	blt.n	8002d6a <_svfiprintf_r+0xfa>
 8002d66:	9207      	str	r2, [sp, #28]
 8002d68:	e004      	b.n	8002d74 <_svfiprintf_r+0x104>
 8002d6a:	4252      	negs	r2, r2
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	9207      	str	r2, [sp, #28]
 8002d72:	9304      	str	r3, [sp, #16]
 8002d74:	783b      	ldrb	r3, [r7, #0]
 8002d76:	2b2e      	cmp	r3, #46	; 0x2e
 8002d78:	d10c      	bne.n	8002d94 <_svfiprintf_r+0x124>
 8002d7a:	787b      	ldrb	r3, [r7, #1]
 8002d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d7e:	d133      	bne.n	8002de8 <_svfiprintf_r+0x178>
 8002d80:	9b03      	ldr	r3, [sp, #12]
 8002d82:	3702      	adds	r7, #2
 8002d84:	1d1a      	adds	r2, r3, #4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	9203      	str	r2, [sp, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bfb8      	it	lt
 8002d8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d92:	9305      	str	r3, [sp, #20]
 8002d94:	4d2e      	ldr	r5, [pc, #184]	; (8002e50 <_svfiprintf_r+0x1e0>)
 8002d96:	2203      	movs	r2, #3
 8002d98:	7839      	ldrb	r1, [r7, #0]
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f7ff fdb8 	bl	8002910 <memchr>
 8002da0:	b138      	cbz	r0, 8002db2 <_svfiprintf_r+0x142>
 8002da2:	2340      	movs	r3, #64	; 0x40
 8002da4:	1b40      	subs	r0, r0, r5
 8002da6:	fa03 f000 	lsl.w	r0, r3, r0
 8002daa:	9b04      	ldr	r3, [sp, #16]
 8002dac:	3701      	adds	r7, #1
 8002dae:	4303      	orrs	r3, r0
 8002db0:	9304      	str	r3, [sp, #16]
 8002db2:	7839      	ldrb	r1, [r7, #0]
 8002db4:	2206      	movs	r2, #6
 8002db6:	4827      	ldr	r0, [pc, #156]	; (8002e54 <_svfiprintf_r+0x1e4>)
 8002db8:	1c7e      	adds	r6, r7, #1
 8002dba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dbe:	f7ff fda7 	bl	8002910 <memchr>
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d038      	beq.n	8002e38 <_svfiprintf_r+0x1c8>
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <_svfiprintf_r+0x1e8>)
 8002dc8:	bb13      	cbnz	r3, 8002e10 <_svfiprintf_r+0x1a0>
 8002dca:	9b03      	ldr	r3, [sp, #12]
 8002dcc:	3307      	adds	r3, #7
 8002dce:	f023 0307 	bic.w	r3, r3, #7
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	9303      	str	r3, [sp, #12]
 8002dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd8:	444b      	add	r3, r9
 8002dda:	9309      	str	r3, [sp, #36]	; 0x24
 8002ddc:	e76d      	b.n	8002cba <_svfiprintf_r+0x4a>
 8002dde:	fb05 3202 	mla	r2, r5, r2, r3
 8002de2:	2001      	movs	r0, #1
 8002de4:	460f      	mov	r7, r1
 8002de6:	e7a6      	b.n	8002d36 <_svfiprintf_r+0xc6>
 8002de8:	2300      	movs	r3, #0
 8002dea:	250a      	movs	r5, #10
 8002dec:	4619      	mov	r1, r3
 8002dee:	3701      	adds	r7, #1
 8002df0:	9305      	str	r3, [sp, #20]
 8002df2:	4638      	mov	r0, r7
 8002df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002df8:	3a30      	subs	r2, #48	; 0x30
 8002dfa:	2a09      	cmp	r2, #9
 8002dfc:	d903      	bls.n	8002e06 <_svfiprintf_r+0x196>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0c8      	beq.n	8002d94 <_svfiprintf_r+0x124>
 8002e02:	9105      	str	r1, [sp, #20]
 8002e04:	e7c6      	b.n	8002d94 <_svfiprintf_r+0x124>
 8002e06:	fb05 2101 	mla	r1, r5, r1, r2
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	4607      	mov	r7, r0
 8002e0e:	e7f0      	b.n	8002df2 <_svfiprintf_r+0x182>
 8002e10:	ab03      	add	r3, sp, #12
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	4622      	mov	r2, r4
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <_svfiprintf_r+0x1ec>)
 8002e18:	a904      	add	r1, sp, #16
 8002e1a:	4640      	mov	r0, r8
 8002e1c:	f3af 8000 	nop.w
 8002e20:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002e24:	4681      	mov	r9, r0
 8002e26:	d1d6      	bne.n	8002dd6 <_svfiprintf_r+0x166>
 8002e28:	89a3      	ldrh	r3, [r4, #12]
 8002e2a:	065b      	lsls	r3, r3, #25
 8002e2c:	f53f af35 	bmi.w	8002c9a <_svfiprintf_r+0x2a>
 8002e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e32:	b01d      	add	sp, #116	; 0x74
 8002e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e38:	ab03      	add	r3, sp, #12
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <_svfiprintf_r+0x1ec>)
 8002e40:	a904      	add	r1, sp, #16
 8002e42:	4640      	mov	r0, r8
 8002e44:	f000 f882 	bl	8002f4c <_printf_i>
 8002e48:	e7ea      	b.n	8002e20 <_svfiprintf_r+0x1b0>
 8002e4a:	bf00      	nop
 8002e4c:	080032e8 	.word	0x080032e8
 8002e50:	080032ee 	.word	0x080032ee
 8002e54:	080032f2 	.word	0x080032f2
 8002e58:	00000000 	.word	0x00000000
 8002e5c:	08002bbd 	.word	0x08002bbd

08002e60 <_printf_common>:
 8002e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e64:	4691      	mov	r9, r2
 8002e66:	461f      	mov	r7, r3
 8002e68:	688a      	ldr	r2, [r1, #8]
 8002e6a:	690b      	ldr	r3, [r1, #16]
 8002e6c:	4606      	mov	r6, r0
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	bfb8      	it	lt
 8002e72:	4613      	movlt	r3, r2
 8002e74:	f8c9 3000 	str.w	r3, [r9]
 8002e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e82:	b112      	cbz	r2, 8002e8a <_printf_common+0x2a>
 8002e84:	3301      	adds	r3, #1
 8002e86:	f8c9 3000 	str.w	r3, [r9]
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	0699      	lsls	r1, r3, #26
 8002e8e:	bf42      	ittt	mi
 8002e90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e94:	3302      	addmi	r3, #2
 8002e96:	f8c9 3000 	strmi.w	r3, [r9]
 8002e9a:	6825      	ldr	r5, [r4, #0]
 8002e9c:	f015 0506 	ands.w	r5, r5, #6
 8002ea0:	d107      	bne.n	8002eb2 <_printf_common+0x52>
 8002ea2:	f104 0a19 	add.w	sl, r4, #25
 8002ea6:	68e3      	ldr	r3, [r4, #12]
 8002ea8:	f8d9 2000 	ldr.w	r2, [r9]
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	42ab      	cmp	r3, r5
 8002eb0:	dc29      	bgt.n	8002f06 <_printf_common+0xa6>
 8002eb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002eb6:	6822      	ldr	r2, [r4, #0]
 8002eb8:	3300      	adds	r3, #0
 8002eba:	bf18      	it	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	0692      	lsls	r2, r2, #26
 8002ec0:	d42e      	bmi.n	8002f20 <_printf_common+0xc0>
 8002ec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ec6:	4639      	mov	r1, r7
 8002ec8:	4630      	mov	r0, r6
 8002eca:	47c0      	blx	r8
 8002ecc:	3001      	adds	r0, #1
 8002ece:	d021      	beq.n	8002f14 <_printf_common+0xb4>
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	68e5      	ldr	r5, [r4, #12]
 8002ed4:	f003 0306 	and.w	r3, r3, #6
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	bf18      	it	ne
 8002edc:	2500      	movne	r5, #0
 8002ede:	f8d9 2000 	ldr.w	r2, [r9]
 8002ee2:	f04f 0900 	mov.w	r9, #0
 8002ee6:	bf08      	it	eq
 8002ee8:	1aad      	subeq	r5, r5, r2
 8002eea:	68a3      	ldr	r3, [r4, #8]
 8002eec:	6922      	ldr	r2, [r4, #16]
 8002eee:	bf08      	it	eq
 8002ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	bfc4      	itt	gt
 8002ef8:	1a9b      	subgt	r3, r3, r2
 8002efa:	18ed      	addgt	r5, r5, r3
 8002efc:	341a      	adds	r4, #26
 8002efe:	454d      	cmp	r5, r9
 8002f00:	d11a      	bne.n	8002f38 <_printf_common+0xd8>
 8002f02:	2000      	movs	r0, #0
 8002f04:	e008      	b.n	8002f18 <_printf_common+0xb8>
 8002f06:	2301      	movs	r3, #1
 8002f08:	4652      	mov	r2, sl
 8002f0a:	4639      	mov	r1, r7
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	47c0      	blx	r8
 8002f10:	3001      	adds	r0, #1
 8002f12:	d103      	bne.n	8002f1c <_printf_common+0xbc>
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f1c:	3501      	adds	r5, #1
 8002f1e:	e7c2      	b.n	8002ea6 <_printf_common+0x46>
 8002f20:	2030      	movs	r0, #48	; 0x30
 8002f22:	18e1      	adds	r1, r4, r3
 8002f24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f2e:	4422      	add	r2, r4
 8002f30:	3302      	adds	r3, #2
 8002f32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f36:	e7c4      	b.n	8002ec2 <_printf_common+0x62>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	4639      	mov	r1, r7
 8002f3e:	4630      	mov	r0, r6
 8002f40:	47c0      	blx	r8
 8002f42:	3001      	adds	r0, #1
 8002f44:	d0e6      	beq.n	8002f14 <_printf_common+0xb4>
 8002f46:	f109 0901 	add.w	r9, r9, #1
 8002f4a:	e7d8      	b.n	8002efe <_printf_common+0x9e>

08002f4c <_printf_i>:
 8002f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002f54:	460c      	mov	r4, r1
 8002f56:	7e09      	ldrb	r1, [r1, #24]
 8002f58:	b085      	sub	sp, #20
 8002f5a:	296e      	cmp	r1, #110	; 0x6e
 8002f5c:	4617      	mov	r7, r2
 8002f5e:	4606      	mov	r6, r0
 8002f60:	4698      	mov	r8, r3
 8002f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f64:	f000 80b3 	beq.w	80030ce <_printf_i+0x182>
 8002f68:	d822      	bhi.n	8002fb0 <_printf_i+0x64>
 8002f6a:	2963      	cmp	r1, #99	; 0x63
 8002f6c:	d036      	beq.n	8002fdc <_printf_i+0x90>
 8002f6e:	d80a      	bhi.n	8002f86 <_printf_i+0x3a>
 8002f70:	2900      	cmp	r1, #0
 8002f72:	f000 80b9 	beq.w	80030e8 <_printf_i+0x19c>
 8002f76:	2958      	cmp	r1, #88	; 0x58
 8002f78:	f000 8083 	beq.w	8003082 <_printf_i+0x136>
 8002f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f84:	e032      	b.n	8002fec <_printf_i+0xa0>
 8002f86:	2964      	cmp	r1, #100	; 0x64
 8002f88:	d001      	beq.n	8002f8e <_printf_i+0x42>
 8002f8a:	2969      	cmp	r1, #105	; 0x69
 8002f8c:	d1f6      	bne.n	8002f7c <_printf_i+0x30>
 8002f8e:	6820      	ldr	r0, [r4, #0]
 8002f90:	6813      	ldr	r3, [r2, #0]
 8002f92:	0605      	lsls	r5, r0, #24
 8002f94:	f103 0104 	add.w	r1, r3, #4
 8002f98:	d52a      	bpl.n	8002ff0 <_printf_i+0xa4>
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6011      	str	r1, [r2, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	da03      	bge.n	8002faa <_printf_i+0x5e>
 8002fa2:	222d      	movs	r2, #45	; 0x2d
 8002fa4:	425b      	negs	r3, r3
 8002fa6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002faa:	486f      	ldr	r0, [pc, #444]	; (8003168 <_printf_i+0x21c>)
 8002fac:	220a      	movs	r2, #10
 8002fae:	e039      	b.n	8003024 <_printf_i+0xd8>
 8002fb0:	2973      	cmp	r1, #115	; 0x73
 8002fb2:	f000 809d 	beq.w	80030f0 <_printf_i+0x1a4>
 8002fb6:	d808      	bhi.n	8002fca <_printf_i+0x7e>
 8002fb8:	296f      	cmp	r1, #111	; 0x6f
 8002fba:	d020      	beq.n	8002ffe <_printf_i+0xb2>
 8002fbc:	2970      	cmp	r1, #112	; 0x70
 8002fbe:	d1dd      	bne.n	8002f7c <_printf_i+0x30>
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	f043 0320 	orr.w	r3, r3, #32
 8002fc6:	6023      	str	r3, [r4, #0]
 8002fc8:	e003      	b.n	8002fd2 <_printf_i+0x86>
 8002fca:	2975      	cmp	r1, #117	; 0x75
 8002fcc:	d017      	beq.n	8002ffe <_printf_i+0xb2>
 8002fce:	2978      	cmp	r1, #120	; 0x78
 8002fd0:	d1d4      	bne.n	8002f7c <_printf_i+0x30>
 8002fd2:	2378      	movs	r3, #120	; 0x78
 8002fd4:	4865      	ldr	r0, [pc, #404]	; (800316c <_printf_i+0x220>)
 8002fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fda:	e055      	b.n	8003088 <_printf_i+0x13c>
 8002fdc:	6813      	ldr	r3, [r2, #0]
 8002fde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fe2:	1d19      	adds	r1, r3, #4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6011      	str	r1, [r2, #0]
 8002fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fec:	2301      	movs	r3, #1
 8002fee:	e08c      	b.n	800310a <_printf_i+0x1be>
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ff6:	6011      	str	r1, [r2, #0]
 8002ff8:	bf18      	it	ne
 8002ffa:	b21b      	sxthne	r3, r3
 8002ffc:	e7cf      	b.n	8002f9e <_printf_i+0x52>
 8002ffe:	6813      	ldr	r3, [r2, #0]
 8003000:	6825      	ldr	r5, [r4, #0]
 8003002:	1d18      	adds	r0, r3, #4
 8003004:	6010      	str	r0, [r2, #0]
 8003006:	0628      	lsls	r0, r5, #24
 8003008:	d501      	bpl.n	800300e <_printf_i+0xc2>
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	e002      	b.n	8003014 <_printf_i+0xc8>
 800300e:	0668      	lsls	r0, r5, #25
 8003010:	d5fb      	bpl.n	800300a <_printf_i+0xbe>
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	296f      	cmp	r1, #111	; 0x6f
 8003016:	bf14      	ite	ne
 8003018:	220a      	movne	r2, #10
 800301a:	2208      	moveq	r2, #8
 800301c:	4852      	ldr	r0, [pc, #328]	; (8003168 <_printf_i+0x21c>)
 800301e:	2100      	movs	r1, #0
 8003020:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003024:	6865      	ldr	r5, [r4, #4]
 8003026:	2d00      	cmp	r5, #0
 8003028:	60a5      	str	r5, [r4, #8]
 800302a:	f2c0 8095 	blt.w	8003158 <_printf_i+0x20c>
 800302e:	6821      	ldr	r1, [r4, #0]
 8003030:	f021 0104 	bic.w	r1, r1, #4
 8003034:	6021      	str	r1, [r4, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d13d      	bne.n	80030b6 <_printf_i+0x16a>
 800303a:	2d00      	cmp	r5, #0
 800303c:	f040 808e 	bne.w	800315c <_printf_i+0x210>
 8003040:	4665      	mov	r5, ip
 8003042:	2a08      	cmp	r2, #8
 8003044:	d10b      	bne.n	800305e <_printf_i+0x112>
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	07db      	lsls	r3, r3, #31
 800304a:	d508      	bpl.n	800305e <_printf_i+0x112>
 800304c:	6923      	ldr	r3, [r4, #16]
 800304e:	6862      	ldr	r2, [r4, #4]
 8003050:	429a      	cmp	r2, r3
 8003052:	bfde      	ittt	le
 8003054:	2330      	movle	r3, #48	; 0x30
 8003056:	f805 3c01 	strble.w	r3, [r5, #-1]
 800305a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800305e:	ebac 0305 	sub.w	r3, ip, r5
 8003062:	6123      	str	r3, [r4, #16]
 8003064:	f8cd 8000 	str.w	r8, [sp]
 8003068:	463b      	mov	r3, r7
 800306a:	aa03      	add	r2, sp, #12
 800306c:	4621      	mov	r1, r4
 800306e:	4630      	mov	r0, r6
 8003070:	f7ff fef6 	bl	8002e60 <_printf_common>
 8003074:	3001      	adds	r0, #1
 8003076:	d14d      	bne.n	8003114 <_printf_i+0x1c8>
 8003078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800307c:	b005      	add	sp, #20
 800307e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003082:	4839      	ldr	r0, [pc, #228]	; (8003168 <_printf_i+0x21c>)
 8003084:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003088:	6813      	ldr	r3, [r2, #0]
 800308a:	6821      	ldr	r1, [r4, #0]
 800308c:	1d1d      	adds	r5, r3, #4
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6015      	str	r5, [r2, #0]
 8003092:	060a      	lsls	r2, r1, #24
 8003094:	d50b      	bpl.n	80030ae <_printf_i+0x162>
 8003096:	07ca      	lsls	r2, r1, #31
 8003098:	bf44      	itt	mi
 800309a:	f041 0120 	orrmi.w	r1, r1, #32
 800309e:	6021      	strmi	r1, [r4, #0]
 80030a0:	b91b      	cbnz	r3, 80030aa <_printf_i+0x15e>
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	f022 0220 	bic.w	r2, r2, #32
 80030a8:	6022      	str	r2, [r4, #0]
 80030aa:	2210      	movs	r2, #16
 80030ac:	e7b7      	b.n	800301e <_printf_i+0xd2>
 80030ae:	064d      	lsls	r5, r1, #25
 80030b0:	bf48      	it	mi
 80030b2:	b29b      	uxthmi	r3, r3
 80030b4:	e7ef      	b.n	8003096 <_printf_i+0x14a>
 80030b6:	4665      	mov	r5, ip
 80030b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80030bc:	fb02 3311 	mls	r3, r2, r1, r3
 80030c0:	5cc3      	ldrb	r3, [r0, r3]
 80030c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030c6:	460b      	mov	r3, r1
 80030c8:	2900      	cmp	r1, #0
 80030ca:	d1f5      	bne.n	80030b8 <_printf_i+0x16c>
 80030cc:	e7b9      	b.n	8003042 <_printf_i+0xf6>
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	6825      	ldr	r5, [r4, #0]
 80030d2:	1d18      	adds	r0, r3, #4
 80030d4:	6961      	ldr	r1, [r4, #20]
 80030d6:	6010      	str	r0, [r2, #0]
 80030d8:	0628      	lsls	r0, r5, #24
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	d501      	bpl.n	80030e2 <_printf_i+0x196>
 80030de:	6019      	str	r1, [r3, #0]
 80030e0:	e002      	b.n	80030e8 <_printf_i+0x19c>
 80030e2:	066a      	lsls	r2, r5, #25
 80030e4:	d5fb      	bpl.n	80030de <_printf_i+0x192>
 80030e6:	8019      	strh	r1, [r3, #0]
 80030e8:	2300      	movs	r3, #0
 80030ea:	4665      	mov	r5, ip
 80030ec:	6123      	str	r3, [r4, #16]
 80030ee:	e7b9      	b.n	8003064 <_printf_i+0x118>
 80030f0:	6813      	ldr	r3, [r2, #0]
 80030f2:	1d19      	adds	r1, r3, #4
 80030f4:	6011      	str	r1, [r2, #0]
 80030f6:	681d      	ldr	r5, [r3, #0]
 80030f8:	6862      	ldr	r2, [r4, #4]
 80030fa:	2100      	movs	r1, #0
 80030fc:	4628      	mov	r0, r5
 80030fe:	f7ff fc07 	bl	8002910 <memchr>
 8003102:	b108      	cbz	r0, 8003108 <_printf_i+0x1bc>
 8003104:	1b40      	subs	r0, r0, r5
 8003106:	6060      	str	r0, [r4, #4]
 8003108:	6863      	ldr	r3, [r4, #4]
 800310a:	6123      	str	r3, [r4, #16]
 800310c:	2300      	movs	r3, #0
 800310e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003112:	e7a7      	b.n	8003064 <_printf_i+0x118>
 8003114:	6923      	ldr	r3, [r4, #16]
 8003116:	462a      	mov	r2, r5
 8003118:	4639      	mov	r1, r7
 800311a:	4630      	mov	r0, r6
 800311c:	47c0      	blx	r8
 800311e:	3001      	adds	r0, #1
 8003120:	d0aa      	beq.n	8003078 <_printf_i+0x12c>
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	079b      	lsls	r3, r3, #30
 8003126:	d413      	bmi.n	8003150 <_printf_i+0x204>
 8003128:	68e0      	ldr	r0, [r4, #12]
 800312a:	9b03      	ldr	r3, [sp, #12]
 800312c:	4298      	cmp	r0, r3
 800312e:	bfb8      	it	lt
 8003130:	4618      	movlt	r0, r3
 8003132:	e7a3      	b.n	800307c <_printf_i+0x130>
 8003134:	2301      	movs	r3, #1
 8003136:	464a      	mov	r2, r9
 8003138:	4639      	mov	r1, r7
 800313a:	4630      	mov	r0, r6
 800313c:	47c0      	blx	r8
 800313e:	3001      	adds	r0, #1
 8003140:	d09a      	beq.n	8003078 <_printf_i+0x12c>
 8003142:	3501      	adds	r5, #1
 8003144:	68e3      	ldr	r3, [r4, #12]
 8003146:	9a03      	ldr	r2, [sp, #12]
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	42ab      	cmp	r3, r5
 800314c:	dcf2      	bgt.n	8003134 <_printf_i+0x1e8>
 800314e:	e7eb      	b.n	8003128 <_printf_i+0x1dc>
 8003150:	2500      	movs	r5, #0
 8003152:	f104 0919 	add.w	r9, r4, #25
 8003156:	e7f5      	b.n	8003144 <_printf_i+0x1f8>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1ac      	bne.n	80030b6 <_printf_i+0x16a>
 800315c:	7803      	ldrb	r3, [r0, #0]
 800315e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003162:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003166:	e76c      	b.n	8003042 <_printf_i+0xf6>
 8003168:	080032f9 	.word	0x080032f9
 800316c:	0800330a 	.word	0x0800330a

08003170 <_realloc_r>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	4607      	mov	r7, r0
 8003174:	4614      	mov	r4, r2
 8003176:	460e      	mov	r6, r1
 8003178:	b921      	cbnz	r1, 8003184 <_realloc_r+0x14>
 800317a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800317e:	4611      	mov	r1, r2
 8003180:	f7ff bc4c 	b.w	8002a1c <_malloc_r>
 8003184:	b922      	cbnz	r2, 8003190 <_realloc_r+0x20>
 8003186:	f7ff fbfd 	bl	8002984 <_free_r>
 800318a:	4625      	mov	r5, r4
 800318c:	4628      	mov	r0, r5
 800318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003190:	f000 f814 	bl	80031bc <_malloc_usable_size_r>
 8003194:	42a0      	cmp	r0, r4
 8003196:	d20f      	bcs.n	80031b8 <_realloc_r+0x48>
 8003198:	4621      	mov	r1, r4
 800319a:	4638      	mov	r0, r7
 800319c:	f7ff fc3e 	bl	8002a1c <_malloc_r>
 80031a0:	4605      	mov	r5, r0
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d0f2      	beq.n	800318c <_realloc_r+0x1c>
 80031a6:	4631      	mov	r1, r6
 80031a8:	4622      	mov	r2, r4
 80031aa:	f7ff fbbf 	bl	800292c <memcpy>
 80031ae:	4631      	mov	r1, r6
 80031b0:	4638      	mov	r0, r7
 80031b2:	f7ff fbe7 	bl	8002984 <_free_r>
 80031b6:	e7e9      	b.n	800318c <_realloc_r+0x1c>
 80031b8:	4635      	mov	r5, r6
 80031ba:	e7e7      	b.n	800318c <_realloc_r+0x1c>

080031bc <_malloc_usable_size_r>:
 80031bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031c0:	1f18      	subs	r0, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bfbc      	itt	lt
 80031c6:	580b      	ldrlt	r3, [r1, r0]
 80031c8:	18c0      	addlt	r0, r0, r3
 80031ca:	4770      	bx	lr

080031cc <_init>:
 80031cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ce:	bf00      	nop
 80031d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d2:	bc08      	pop	{r3}
 80031d4:	469e      	mov	lr, r3
 80031d6:	4770      	bx	lr

080031d8 <_fini>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	bf00      	nop
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr
